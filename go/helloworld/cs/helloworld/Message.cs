// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Eqproto {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgdlcXByb3RvIv0BCg5DaGFubmVsTWVzc2FnZRIQ",
            "CghjaGFuX251bRgBIAEoBRIQCghsYW5ndWFnZRgCIAEoBRIMCgRmcm9tGAMg",
            "ASgJEgoKAnRvGAQgASgJEg8KB21lc3NhZ2UYBSABKAkSEQoJZ3VpbGRkYmlk",
            "GAYgASgFEhEKCWRlbGl2ZXJ0bxgHIAEoCRIMCgR0eXBlGAggASgFEhEKCW1p",
            "bnN0YXR1cxgJIAEoBRIRCglmcm9tYWRtaW4YCiABKAUSDwoHbm9yZXBseRgL",
            "IAEoCBIQCghpc19lbW90ZRgMIAEoCBIOCgZxdWV1ZWQYDSABKAUSDwoHem9u",
            "ZV9pZBgOIAEoBSJiCg5Db21tYW5kTWVzc2FnZRIOCgZhdXRob3IYASABKAkS",
            "DwoHY29tbWFuZBgCIAEoCRIOCgZwYXJhbXMYAyADKAkSDgoGcmVzdWx0GAQg",
            "ASgJEg8KB3BheWxvYWQYBSABKAwijwEKCURhaWx5R2FpbhISCgphY2NvdW50",
            "X2lkGAEgASgFEhQKDGNoYXJhY3Rlcl9pZBgCIAEoBRIVCg1sZXZlbHNfZ2Fp",
            "bmVkGAMgASgFEhkKEWV4cGVyaWVuY2VfZ2FpbmVkGAQgASgFEhQKDG1vbmV5",
            "X2Vhcm5lZBgFIAEoBRIQCghpZGVudGl0eRgGIAEoCSKNAQoGRW50aXR5EgoK",
            "AmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDAoEdHlwZRgDIAEoBRIKCgJocBgE",
            "IAEoBRINCgVsZXZlbBgFIAEoBRIjCghwb3NpdGlvbhgGIAEoCzIRLmVxcHJv",
            "dG8uUG9zaXRpb24SDAoEcmFjZRgHIAEoBRINCgVjbGFzcxgIIAEoBSItCghF",
            "bnRpdGllcxIhCghlbnRpdGllcxgBIAMoCzIPLmVxcHJvdG8uRW50aXR5IjYK",
            "CFBvc2l0aW9uEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkK",
            "AWgYBCABKAIiuwIKDlRleHR1cmVQcm9maWxlEh4KBEhlYWQYASABKAsyEC5l",
            "cXByb3RvLlRleHR1cmUSHwoFQ2hlc3QYAiABKAsyEC5lcXByb3RvLlRleHR1",
            "cmUSHgoEQXJtcxgDIAEoCzIQLmVxcHJvdG8uVGV4dHVyZRIfCgVXcmlzdBgE",
            "IAEoCzIQLmVxcHJvdG8uVGV4dHVyZRIfCgVIYW5kcxgFIAEoCzIQLmVxcHJv",
            "dG8uVGV4dHVyZRIeCgRMZWdzGAYgASgLMhAuZXFwcm90by5UZXh0dXJlEh4K",
            "BEZlZXQYByABKAsyEC5lcXByb3RvLlRleHR1cmUSIQoHUHJpbWFyeRgIIAEo",
            "CzIQLmVxcHJvdG8uVGV4dHVyZRIjCglTZWNvbmRhcnkYCSABKAsyEC5lcXBy",
            "b3RvLlRleHR1cmUibAoHVGV4dHVyZRIQCghtYXRlcmlhbBgBIAEoDRIQCgh1",
            "bmtub3duMRgCIAEoDRISCgpFbGl0ZU1vZGVsGAMgASgNEhcKD0hlcm9zRm9y",
            "Z2VNb2RlbBgEIAEoDRIQCghVbmtub3duMhgFIAEoDSKdAgoLVGludFByb2Zp",
            "bGUSGwoESGVhZBgBIAEoCzINLmVxcHJvdG8uVGludBIcCgVDaGVzdBgCIAEo",
            "CzINLmVxcHJvdG8uVGludBIbCgRBcm1zGAMgASgLMg0uZXFwcm90by5UaW50",
            "EhwKBVdyaXN0GAQgASgLMg0uZXFwcm90by5UaW50EhwKBUhhbmRzGAUgASgL",
            "Mg0uZXFwcm90by5UaW50EhsKBExlZ3MYBiABKAsyDS5lcXByb3RvLlRpbnQS",
            "GwoERmVldBgHIAEoCzINLmVxcHJvdG8uVGludBIeCgdQcmltYXJ5GAggASgL",
            "Mg0uZXFwcm90by5UaW50EiAKCVNlY29uZGFyeRgJIAEoCzINLmVxcHJvdG8u",
            "VGludCJQCgRUaW50EgwKBEJsdWUYASABKA0SDQoFR3JlZW4YAiABKA0SCwoD",
            "UmVkGAMgASgNEg8KB1VzZVRpbnQYBCABKA0SDQoFQ29sb3IYBSABKA0iNQoF",
            "RXZlbnQSGwoCb3AYASABKA4yDy5lcXByb3RvLk9wQ29kZRIPCgdwYXlsb2Fk",
            "GAIgASgMIqkBCgpEZWF0aEV2ZW50EhAKCHNwYXduX2lkGAEgASgNEhEKCWtp",
            "bGxlcl9pZBgCIAEoDRIRCgljb3Jwc2VfaWQYAyABKA0SFAoMYmluZF96b25l",
            "X2lkGAQgASgNEhAKCHNwZWxsX2lkGAUgASgNEhcKD2F0dGFja19za2lsbF9p",
            "ZBgGIAEoDRIOCgZkYW1hZ2UYByABKA0SEgoKdW5rbm93bjAyOBgIIAEoDSKW",
            "AQoLRGFtYWdlRXZlbnQSDgoGdGFyZ2V0GAEgASgNEg4KBnNvdXJjZRgCIAEo",
            "DRIMCgR0eXBlGAMgASgNEg8KB3NwZWxsaWQYBCABKA0SDgoGZGFtYWdlGAUg",
            "ASgNEg0KBWZvcmNlGAYgASgCEhQKDG1lbGVlcHVzaF94eRgHIAEoAhITCgtt",
            "ZWxlZXB1c2hfehgIIAEoAiIzCgtFbnRpdHlFdmVudBIRCgllbnRpdHlfaWQY",
            "ASABKA0SEQoJdGFyZ2V0X2lkGAIgASgNIp8BChNDaGFubmVsTWVzc2FnZUV2",
            "ZW50EhMKC3RhcmdldF9uYW1lGAEgASgJEg4KBnNlbmRlchgCIAEoCRIQCghs",
            "YW5ndWFnZRgDIAEoDRIQCghjaGFuX251bRgEIAEoDRITCgtjbV91bmtub3du",
            "NBgFIAEoDRIZChFza2lsbF9pbl9sYW5ndWFnZRgGIAEoDRIPCgdtZXNzYWdl",
            "GAcgASgJIsEBCg9XZWFyQ2hhbmdlRXZlbnQSEAoIc3Bhd25faWQYASABKA0S",
            "EAoIbWF0ZXJpYWwYAiABKA0SEQoJdW5rbm93bjA2GAMgASgNEhYKDmVsaXRl",
            "X21hdGVyaWFsGAQgASgNEhgKEGhlcm9fZm9yZ2VfbW9kZWwYBSABKA0SEQoJ",
            "dW5rbm93bjE4GAYgASgNEhwKBWNvbG9yGAcgASgLMg0uZXFwcm90by5UaW50",
            "EhQKDHdlYXJfc2xvdF9pZBgIIAEoDSIzChBEZWxldGVTcGF3bkV2ZW50EhAK",
            "CHNwYXduX2lkGAEgASgNEg0KBWRlY2F5GAIgASgNIjsKB0hQRXZlbnQSEAoI",
            "c3Bhd25faWQYASABKA0SDgoGY3VyX2hwGAIgASgNEg4KBm1heF9ocBgDIAEo",
            "DSKcAgoZUGxheWVyUG9zaXRpb25VcGRhdGVFdmVudBIQCghzcGF3bl9pZBgB",
            "IAEoDRIVCg1kZWx0YV9oZWFkaW5nGAIgASgFEg0KBXhfcG9zGAMgASgFEhMK",
            "C3BhZGRpbmcwMDAyGAQgASgFEg0KBXlfcG9zGAUgASgFEhEKCWFuaW1hdGlv",
            "bhgGIAEoBRITCgtwYWRkaW5nMDAwNhgHIAEoBRINCgV6X3BvcxgIIAEoBRIP",
            "CgdkZWx0YV95GAkgASgFEg8KB2RlbHRhX3gYCiABKAUSDwoHaGVhZGluZxgL",
            "IAEoBRITCgtwYWRkaW5nMDAxNBgMIAEoBRIPCgdkZWx0YV96GA0gASgFEhMK",
            "C3BhZGRpbmcwMDE4GA4gASgFIkAKDkFuaW1hdGlvbkV2ZW50Eg8KB3NwYXdu",
            "aWQYASABKA0SDQoFc3BlZWQYAiABKA0SDgoGYWN0aW9uGAMgASgNIt8PCgpT",
            "cGF3bkV2ZW50EhMKC3Vua25vd24wMDAwGAEgASgNEgoKAmdtGAIgASgNEhMK",
            "C3Vua25vd24wMDAzGAMgASgNEg4KBmFhaXRsZRgEIAEoDRITCgt1bmtub3du",
            "MDAwNBgFIAEoDRIMCgRhbm9uGAYgASgNEgwKBGZhY2UYByABKA0SDAoEbmFt",
            "ZRgIIAEoCRINCgVkZWl0eRgJIAEoDRITCgt1bmtub3duMDA3MxgKIAEoDRIM",
            "CgRzaXplGAsgASgCEhMKC3Vua25vd24wMDc5GAwgASgNEgsKA05QQxgNIAEo",
            "DRINCgVpbnZpcxgOIAEoDRIRCgloYWlyY29sb3IYDyABKA0SDQoFY3VySHAY",
            "ECABKA0SDgoGbWF4X2hwGBEgASgNEhAKCGZpbmRhYmxlGBIgASgNEhMKC3Vu",
            "a25vd24wMDg5GBMgASgNEhQKDGRlbHRhSGVhZGluZxgUIAEoBRIJCgF4GBUg",
            "ASgFEhMKC3BhZGRpbmcwMDU0GBYgASgFEgkKAXkYFyABKAUSEQoJYW5pbWF0",
            "aW9uGBggASgFEhMKC3BhZGRpbmcwMDU4GBkgASgFEgkKAXoYGiABKAUSDgoG",
            "ZGVsdGFZGBsgASgFEg4KBmRlbHRhWBgcIAEoBRIPCgdoZWFkaW5nGB0gASgN",
            "EhMKC3BhZGRpbmcwMDY2GB4gASgFEg4KBmRlbHRhWhgfIAEoBRITCgtwYWRk",
            "aW5nMDA3MBggIAEoBRIRCglleWVjb2xvcjEYISABKA0SEwoLdW5rbm93bjAx",
            "MTUYIiABKA0SEgoKU3RhbmRTdGF0ZRgjIAEoDRIYChBkcmFra2luX2hlcml0",
            "YWdlGCQgASgNEhYKDmRyYWtraW5fdGF0dG9vGCUgASgNEhcKD2RyYWtraW5f",
            "ZGV0YWlscxgmIAEoDRIQCghzaG93aGVsbRgnIAEoDRITCgt1bmtub3duMDE0",
            "MBgoIAEoDRIOCgZpc19ucGMYKSABKA0SEQoJaGFpcnN0eWxlGCogASgNEg0K",
            "BWJlYXJkGCsgASgNEhMKC3Vua25vd24wMTQ3GCwgASgNEg0KBWxldmVsGC0g",
            "ASgNEhMKC1BsYXllclN0YXRlGC4gASgNEhIKCmJlYXJkY29sb3IYLyABKA0S",
            "DgoGc3VmZml4GDAgASgJEhIKCnBldE93bmVySWQYMSABKA0SEQoJZ3VpbGRy",
            "YW5rGDIgASgNEhMKC3Vua25vd24wMTk0GDMgASgNEioKCWVxdWlwbWVudBg0",
            "IAEoCzIXLmVxcHJvdG8uVGV4dHVyZVByb2ZpbGUSEAoIcnVuc3BlZWQYNSAB",
            "KAISCwoDYWZrGDYgASgNEg8KB2d1aWxkSUQYNyABKA0SDQoFdGl0bGUYOCAB",
            "KAkSEwoLdW5rbm93bjAyNzQYOSABKA0SEwoLc2V0X3RvXzB4RkYYOiABKA0S",
            "DAoEaGVsbRg7IAEoDRIMCgRyYWNlGDwgASgNEhMKC3Vua25vd24wMjg4GD0g",
            "ASgNEhAKCGxhc3ROYW1lGD4gASgJEhEKCXdhbGtzcGVlZBg/IAEoAhITCgt1",
            "bmtub3duMDMyOBhAIAEoDRIOCgZpc19wZXQYQSABKA0SDQoFbGlnaHQYQiAB",
            "KA0SDgoGY2xhc3NfGEMgASgNEhEKCWV5ZWNvbG9yMhhEIAEoDRIPCgdmbHlt",
            "b2RlGEUgASgNEg4KBmdlbmRlchhGIAEoDRIQCghib2R5dHlwZRhHIAEoDRIT",
            "Cgt1bmtub3duMDMzNhhIIAEoDRIUCgxlcXVpcF9jaGVzdDIYSSABKA0SEwoL",
            "bW91bnRfY29sb3IYSiABKA0SDwoHc3Bhd25JZBhLIAEoDRITCgt1bmtub3du",
            "MDM0NBhMIAEoDRITCgtJc01lcmNlbmFyeRhNIAEoDRIsCg5lcXVpcG1lbnRf",
            "dGludBhOIAEoCzIULmVxcHJvdG8uVGludFByb2ZpbGUSCwoDbGZnGE8gASgN",
            "EhoKEkRlc3RydWN0aWJsZU9iamVjdBhQIAEoCBIZChFEZXN0cnVjdGlibGVN",
            "b2RlbBhSIAEoCRIZChFEZXN0cnVjdGlibGVOYW1lMhhTIAEoCRIaChJEZXN0",
            "cnVjdGlibGVTdHJpbmcYVCABKAkSHgoWRGVzdHJ1Y3RpYmxlQXBwZWFyYW5j",
            "ZRhVIAEoDRIYChBEZXN0cnVjdGlibGVVbmsxGFYgASgNEhcKD0Rlc3RydWN0",
            "aWJsZUlEMRhXIAEoDRIXCg9EZXN0cnVjdGlibGVJRDIYWCABKA0SFwoPRGVz",
            "dHJ1Y3RpYmxlSUQzGFkgASgNEhcKD0Rlc3RydWN0aWJsZUlENBhaIAEoDRIY",
            "ChBEZXN0cnVjdGlibGVVbmsyGFsgASgNEhgKEERlc3RydWN0aWJsZVVuazMY",
            "XCABKA0SGAoQRGVzdHJ1Y3RpYmxlVW5rNBhdIAEoDRIYChBEZXN0cnVjdGli",
            "bGVVbms1GF4gASgNEhgKEERlc3RydWN0aWJsZVVuazYYXyABKA0SGAoQRGVz",
            "dHJ1Y3RpYmxlVW5rNxhgIAEoDRIYChBEZXN0cnVjdGlibGVVbms4GGEgASgN",
            "EhgKEERlc3RydWN0aWJsZVVuazkYYiABKA0SHgoWdGFyZ2V0YWJsZV93aXRo",
            "X2hvdGtleRhjIAEoCBIRCglzaG93X25hbWUYZCABKAgqu2UKBk9wQ29kZRIO",
            "CgpPUF9Vbmtub3duEAASFQoRT1BfRXhwbG9yZVVua25vd24QARINCglPUF8w",
            "eDAxOTMQAhINCglPUF8weDAzNDcQAxIPCgtPUF9BQUFjdGlvbhAEEhIKDk9Q",
            "X0FBRXhwVXBkYXRlEAUSFAoQT1BfQWNjZXB0TmV3VGFzaxAGEhAKDE9QX0Fj",
            "a1BhY2tldBAHEg0KCU9QX0FjdGlvbhAIEg4KCk9QX0FjdGlvbjIQCRIWChJP",
            "UF9BZGROaW1idXNFZmZlY3QQChIUChBPUF9BZHZlbnR1cmVEYXRhEAsSFwoT",
            "T1BfQWR2ZW50dXJlRGV0YWlscxAMEhYKEk9QX0FkdmVudHVyZUZpbmlzaBAN",
            "EhQKEE9QX0FkdmVudHVyZUluZm8QDhIbChdPUF9BZHZlbnR1cmVJbmZvUmVx",
            "dWVzdBAPEiAKHE9QX0FkdmVudHVyZUxlYWRlcmJvYXJkUmVwbHkQEBIiCh5P",
            "UF9BZHZlbnR1cmVMZWFkZXJib2FyZFJlcXVlc3QQERIgChxPUF9BZHZlbnR1",
            "cmVNZXJjaGFudFB1cmNoYXNlEBISHwobT1BfQWR2ZW50dXJlTWVyY2hhbnRS",
            "ZXF1ZXN0EBMSIAocT1BfQWR2ZW50dXJlTWVyY2hhbnRSZXNwb25zZRAUEhwK",
            "GE9QX0FkdmVudHVyZU1lcmNoYW50U2VsbBAVEhwKGE9QX0FkdmVudHVyZVBv",
            "aW50c1VwZGF0ZRAWEhcKE09QX0FkdmVudHVyZVJlcXVlc3QQFxIaChZPUF9B",
            "ZHZlbnR1cmVTdGF0c1JlcGx5EBgSHAoYT1BfQWR2ZW50dXJlU3RhdHNSZXF1",
            "ZXN0EBkSFgoST1BfQWR2ZW50dXJlVXBkYXRlEBoSGwoXT1BfQWdncm9NZXRl",
            "ckxvY2tUYXJnZXQQGxIbChdPUF9BZ2dyb01ldGVyVGFyZ2V0SW5mbxAcEhcK",
            "E09QX0FnZ3JvTWV0ZXJVcGRhdGUQHRISCg5PUF9BbHRDdXJyZW5jeRAeEh8K",
            "G09QX0FsdEN1cnJlbmN5TWVyY2hhbnRSZXBseRAfEiEKHU9QX0FsdEN1cnJl",
            "bmN5TWVyY2hhbnRSZXF1ZXN0ECASGgoWT1BfQWx0Q3VycmVuY3lQdXJjaGFz",
            "ZRAhEhkKFU9QX0FsdEN1cnJlbmN5UmVjbGFpbRAiEhYKEk9QX0FsdEN1cnJl",
            "bmN5U2VsbBAjEh8KG09QX0FsdEN1cnJlbmN5U2VsbFNlbGVjdGlvbhAkEhAK",
            "DE9QX0FuaW1hdGlvbhAlEhoKFk9QX0Fubm95aW5nWm9uZVVua25vd24QJhIS",
            "Cg5PUF9BcHBseVBvaXNvbhAnEhIKDk9QX0FwcHJvdmVOYW1lECgSEwoPT1Bf",
            "QXBwcm92ZVdvcmxkECkSEgoOT1BfQXBwcm92ZVpvbmUQKhINCglPUF9Bc3Np",
            "c3QQKxISCg5PUF9Bc3Npc3RHcm91cBAsEhIKDk9QX0F1Z21lbnRJbmZvEC0S",
            "EgoOT1BfQXVnbWVudEl0ZW0QLhIRCg1PUF9BdXRvQXR0YWNrEC8SEgoOT1Bf",
            "QXV0b0F0dGFjazIQMBIPCgtPUF9BdXRvRmlyZRAxEhAKDE9QX0JhbmRvbGll",
            "chAyEhMKD09QX0JhbmtlckNoYW5nZRAzEg0KCU9QX0JhcnRlchA0Eg0KCU9Q",
            "X0JhemFhchA1EhQKEE9QX0JhemFhckluc3BlY3QQNhITCg9PUF9CYXphYXJT",
            "ZWFyY2gQNxITCg9PUF9CZWNvbWVDb3Jwc2UQOBITCg9PUF9CZWNvbWVUcmFk",
            "ZXIQORIOCgpPUF9CZWdnaW5nEDoSEAoMT1BfQmVnaW5DYXN0EDsSEQoNT1Bf",
            "QmluZF9Xb3VuZBA8EhMKD09QX0Jsb2NrZWRCdWZmcxA9EhAKDE9QX0JvYXJk",
            "Qm9hdBA+EgsKB09QX0J1ZmYQPxIRCg1PUF9CdWZmQ3JlYXRlEEASGAoUT1Bf",
            "QnVmZlJlbW92ZVJlcXVlc3QQQRIKCgZPUF9CdWcQQhITCg9PUF9DYW1lcmFF",
            "ZmZlY3QQQxILCgdPUF9DYW1wEEQSFgoST1BfQ2FuY2VsU25lYWtIaWRlEEUS",
            "EQoNT1BfQ2FuY2VsVGFzaxBGEhIKDk9QX0NhbmNlbFRyYWRlEEcSEAoMT1Bf",
            "Q2FzdFNwZWxsEEgSEQoNT1BfQ2hhbmdlU2l6ZRBJEhUKEU9QX0NoYW5uZWxN",
            "ZXNzYWdlEEoSFgoST1BfQ2hhcmFjdGVyQ3JlYXRlEEsSHQoZT1BfQ2hhcmFj",
            "dGVyQ3JlYXRlUmVxdWVzdBBMEhQKEE9QX0NoYXJJbnZlbnRvcnkQTRIMCghP",
            "UF9DaGFybRBOEhIKDk9QX0NoYXRNZXNzYWdlEE8SDgoKT1BfQ2xlYXJBQRBQ",
            "EhgKFE9QX0NsZWFyQmxvY2tlZEJ1ZmZzEFESHwobT1BfQ2xlYXJMZWFkZXJz",
            "aGlwQWJpbGl0aWVzEFISFAoQT1BfQ2xlYXJOUENNYXJrcxBTEhIKDk9QX0Ns",
            "ZWFyT2JqZWN0EFQSEwoPT1BfQ2xlYXJTdXJuYW1lEFUSEAoMT1BfQ2xpY2tE",
            "b29yEFYSEgoOT1BfQ2xpY2tPYmplY3QQVxIYChRPUF9DbGlja09iamVjdEFj",
            "dGlvbhBYEhIKDk9QX0NsaWVudEVycm9yEFkSEgoOT1BfQ2xpZW50UmVhZHkQ",
            "WhIWChJPUF9DbGllbnRUaW1lU3RhbXAQWxITCg9PUF9DbGllbnRVcGRhdGUQ",
            "XBIVChFPUF9DbG9zZUNvbnRhaW5lchBdEhkKFU9QX0Nsb3NlVHJpYnV0ZU1h",
            "c3RlchBeEhIKDk9QX0NvbG9yZWRUZXh0EF8SFAoQT1BfQ29tYmF0QWJpbGl0",
            "eRBgEg4KCk9QX0NvbW1hbmQQYRIVChFPUF9Db21wbGV0ZWRUYXNrcxBiEhQK",
            "EE9QX0NvbmZpcm1EZWxldGUQYxIOCgpPUF9Db25zZW50EGQSEgoOT1BfQ29u",
            "c2VudERlbnkQZRIWChJPUF9Db25zZW50UmVzcG9uc2UQZhIPCgtPUF9Db25z",
            "aWRlchBnEhUKEU9QX0NvbnNpZGVyQ29ycHNlEGgSDgoKT1BfQ29uc3VtZRBp",
            "EhIKDk9QX0NvbnRyb2xCb2F0EGoSEQoNT1BfQ29ycHNlRHJhZxBrEhEKDU9Q",
            "X0NvcnBzZURyb3AQbBIQCgxPUF9DcmFzaER1bXAQbRIZChVPUF9DcnlzdGFs",
            "Q291bnRVcGRhdGUQbhIUChBPUF9DcnlzdGFsQ3JlYXRlEG8SFQoRT1BfQ3J5",
            "c3RhbFJlY2xhaW0QcBITCg9PUF9DdXN0b21UaXRsZXMQcRINCglPUF9EYW1h",
            "Z2UQchIMCghPUF9EZWF0aBBzEhYKEk9QX0RlbGVnYXRlQWJpbGl0eRB0EhYK",
            "Ek9QX0RlbGV0ZUNoYXJhY3RlchB1EhMKD09QX0RlbGV0ZUNoYXJnZRB2EhEK",
            "DU9QX0RlbGV0ZUl0ZW0QdxIVChFPUF9EZWxldGVQZXRpdGlvbhB4EhIKDk9Q",
            "X0RlbGV0ZVNwYXduEHkSEgoOT1BfRGVsZXRlU3BlbGwQehITCg9PUF9EZW55",
            "UmVzcG9uc2UQexINCglPUF9EaXNhcm0QfBISCg5PUF9EaXNhcm1UcmFwcxB9",
            "EhYKEk9QX0Rpc2NpcGxpbmVUaW1lchB+EhcKE09QX0Rpc2NpcGxpbmVVcGRh",
            "dGUQfxIgChtPUF9EaXNjb3JkTWVyY2hhbnRJbnZlbnRvcnkQgAESIAobT1Bf",
            "RG9Hcm91cExlYWRlcnNoaXBBYmlsaXR5EIEBEhQKD09QX0R1ZWxSZXNwb25z",
            "ZRCCARIVChBPUF9EdWVsUmVzcG9uc2UyEIMBEhAKC09QX0R1bXBOYW1lEIQB",
            "EgsKBk9QX0R5ZRCFARITCg5PUF9EeW5hbWljV2FsbBCGARITCg5PUF9EekFk",
            "ZFBsYXllchCHARIUCg9PUF9EekNob29zZVpvbmUQiAESEQoMT1BfRHpDb21w",
            "YXNzEIkBEh8KGk9QX0R6RXhwZWRpdGlvbkVuZHNXYXJuaW5nEIoBEhgKE09Q",
            "X0R6RXhwZWRpdGlvbkluZm8QiwESGAoTT1BfRHpFeHBlZGl0aW9uTGlzdBCM",
            "ARIfChpPUF9EekpvaW5FeHBlZGl0aW9uQ29uZmlybRCNARIdChhPUF9Eekpv",
            "aW5FeHBlZGl0aW9uUmVwbHkQjgESFgoRT1BfRHpMZWFkZXJTdGF0dXMQjwES",
            "FAoPT1BfRHpMaXN0VGltZXJzEJABEhQKD09QX0R6TWFrZUxlYWRlchCRARIU",
            "Cg9PUF9Eek1lbWJlckxpc3QQkgESFgoRT1BfRHpNZW1iZXJTdGF0dXMQkwES",
            "FAoPT1BfRHpQbGF5ZXJMaXN0EJQBEg4KCU9QX0R6UXVpdBCVARIWChFPUF9E",
            "elJlbW92ZVBsYXllchCWARIUCg9PUF9EelN3YXBQbGF5ZXIQlwESDQoIT1Bf",
            "RW1vdGUQmAESFgoRT1BfRW5kTG9vdFJlcXVlc3QQmQESFwoST1BfRW5kdXJh",
            "bmNlVXBkYXRlEJoBEhEKDE9QX0VudGVyQ2hhdBCbARISCg1PUF9FbnRlcldv",
            "cmxkEJwBEhEKDE9QX0VudkRhbWFnZRCdARIVChBPUF9FeHBhbnNpb25JbmZv",
            "EJ4BEhEKDE9QX0V4cFVwZGF0ZRCfARISCg1PUF9GYWNlQ2hhbmdlEKABEhAK",
            "C09QX0ZlZWRiYWNrEKEBEhIKDU9QX0ZlaWduRGVhdGgQogESGAoTT1BfRmVs",
            "bG93c2hpcFVwZGF0ZRCjARIXChJPUF9GaW5kUGVyc29uUmVwbHkQpAESGQoU",
            "T1BfRmluZFBlcnNvblJlcXVlc3QQpQESEwoOT1BfRmluaXNoVHJhZGUQpgES",
            "FAoPT1BfRmluaXNoV2luZG93EKcBEhUKEE9QX0ZpbmlzaFdpbmRvdzIQqAES",
            "DwoKT1BfRmlzaGluZxCpARINCghPUF9GbGluZxCqARIWChFPUF9GbG9hdExp",
            "c3RUaGluZxCrARIOCglPUF9Gb3JhZ2UQrAESFwoST1BfRm9yY2VGaW5kUGVy",
            "c29uEK0BEhgKE09QX0Zvcm1hdHRlZE1lc3NhZ2UQrgESEgoNT1BfRnJpZW5k",
            "c1dobxCvARIUCg9PUF9HZXRHdWlsZE1PVEQQsAESGQoUT1BfR2V0R3VpbGRN",
            "T1REUmVwbHkQsQESFQoQT1BfR2V0R3VpbGRzTGlzdBCyARIRCgxPUF9HaXZl",
            "TW9uZXkQswESEgoNT1BfR01BcHByb3ZhbBC0ARITCg5PUF9HTUJlY29tZU5Q",
            "QxC1ARITCg5PUF9HTURlbENvcnBzZRC2ARITCg5PUF9HTUVtb3RlWm9uZRC3",
            "ARIVChBPUF9HTUVuZFRyYWluaW5nELgBEh0KGE9QX0dNRW5kVHJhaW5pbmdS",
            "ZXNwb25zZRC5ARIOCglPUF9HTUZpbmQQugESDgoJT1BfR01Hb3RvELsBEhAK",
            "C09QX0dNSGlkZU1lELwBEg4KCU9QX0dNS2ljaxC9ARIOCglPUF9HTUtpbGwQ",
            "vgESEgoNT1BfR01MYXN0TmFtZRC/ARIUCg9PUF9HTU5hbWVDaGFuZ2UQwAES",
            "FgoRT1BfR01TZWFyY2hDb3Jwc2UQwQESEQoMT1BfR01TZXJ2ZXJzEMIBEhAK",
            "C09QX0dNU3VtbW9uEMMBEhAKC09QX0dNVG9nZ2xlEMQBEhIKDU9QX0dNVHJh",
            "aW5pbmcQxQESFAoPT1BfR01UcmFpblNraWxsEMYBEhsKFk9QX0dNVHJhaW5T",
            "a2lsbENvbmZpcm0QxwESFQoQT1BfR01ab25lUmVxdWVzdBDIARIWChFPUF9H",
            "TVpvbmVSZXF1ZXN0MhDJARITCg5PUF9Hcm91bmRTcGF3bhDKARIYChNPUF9H",
            "cm91cEFja25vd2xlZGdlEMsBEhkKFE9QX0dyb3VwQ2FuY2VsSW52aXRlEMwB",
            "EhMKDk9QX0dyb3VwRGVsZXRlEM0BEhQKD09QX0dyb3VwRGlzYmFuZBDOARIZ",
            "ChRPUF9Hcm91cERpc2JhbmRPdGhlchDPARIXChJPUF9Hcm91cERpc2JhbmRZ",
            "b3UQ0AESEwoOT1BfR3JvdXBGb2xsb3cQ0QESFAoPT1BfR3JvdXBGb2xsb3cy",
            "ENIBEhMKDk9QX0dyb3VwSW52aXRlENMBEhQKD09QX0dyb3VwSW52aXRlMhDU",
            "ARIZChRPUF9Hcm91cExlYWRlckNoYW5nZRDVARIfChpPUF9Hcm91cExlYWRl",
            "cnNoaXBBQVVwZGF0ZRDWARIXChJPUF9Hcm91cE1ha2VMZWFkZXIQ1wESEwoO",
            "T1BfR3JvdXBNZW50b3IQ2AESEgoNT1BfR3JvdXBSb2xlcxDZARITCg5PUF9H",
            "cm91cFVwZGF0ZRDaARIUCg9PUF9Hcm91cFVwZGF0ZUIQ2wESGwoWT1BfR3Jv",
            "dXBVcGRhdGVMZWFkZXJBQRDcARIRCgxPUF9HdWlsZEJhbmsQ3QESGQoUT1Bf",
            "R3VpbGRCYW5rSXRlbUxpc3QQ3gESEwoOT1BfR3VpbGRDcmVhdGUQ3wESEwoO",
            "T1BfR3VpbGREZWxldGUQ4AESEwoOT1BfR3VpbGREZW1vdGUQ4QESEwoOT1Bf",
            "R3VpbGRJbnZpdGUQ4gESGQoUT1BfR3VpbGRJbnZpdGVBY2NlcHQQ4wESEwoO",
            "T1BfR3VpbGRMZWFkZXIQ5AESFgoRT1BfR3VpbGRNYW5hZ2VBZGQQ5QESGQoU",
            "T1BfR3VpbGRNYW5hZ2VCYW5rZXIQ5gESGQoUT1BfR3VpbGRNYW5hZ2VSZW1v",
            "dmUQ5wESGQoUT1BfR3VpbGRNYW5hZ2VTdGF0dXMQ6AESHgoZT1BfR3VpbGRN",
            "ZW1iZXJMZXZlbFVwZGF0ZRDpARIXChJPUF9HdWlsZE1lbWJlckxpc3QQ6gES",
            "GQoUT1BfR3VpbGRNZW1iZXJVcGRhdGUQ6wESEQoMT1BfR3VpbGRNT1REEOwB",
            "EhIKDU9QX0d1aWxkUGVhY2UQ7QESFAoPT1BfR3VpbGRQcm9tb3RlEO4BEhcK",
            "Ek9QX0d1aWxkUHVibGljTm90ZRDvARITCg5PUF9HdWlsZFJlbW92ZRDwARIS",
            "Cg1PUF9HdWlsZHNMaXN0EPEBEhMKDk9QX0d1aWxkU3RhdHVzEPIBEhgKE09Q",
            "X0d1aWxkVHJpYnV0ZUluZm8Q8wESIAobT1BfR3VpbGRVcGRhdGVVUkxBbmRD",
            "aGFubmVsEPQBEhAKC09QX0d1aWxkV2FyEPUBEhEKDE9QX0hlYXJ0YmVhdBD2",
            "ARIMCgdPUF9IaWRlEPcBEhIKDU9QX0hpZGVDb3Jwc2UQ+AESEAoLT1BfSFBV",
            "cGRhdGUQ+QESEAoLT1BfSWxsdXNpb24Q+gESFQoQT1BfSW5jcmVhc2VTdGF0",
            "cxD7ARIXChJPUF9Jbml0aWFsSFBVcGRhdGUQ/AESGAoTT1BfSW5pdGlhbE1v",
            "YkhlYWx0aBD9ARIVChBPUF9JbnNwZWN0QW5zd2VyEP4BEhQKD09QX0luc3Bl",
            "Y3RCdWZmcxD/ARIcChdPUF9JbnNwZWN0TWVzc2FnZVVwZGF0ZRCAAhIWChFP",
            "UF9JbnNwZWN0UmVxdWVzdBCBAhIUCg9PUF9JbnN0aWxsRG91YnQQggISFQoQ",
            "T1BfSW50ZXJydXB0Q2FzdBCDAhIVChBPUF9JdGVtTGlua0NsaWNrEIQCEhgK",
            "E09QX0l0ZW1MaW5rUmVzcG9uc2UQhQISFAoPT1BfSXRlbUxpbmtUZXh0EIYC",
            "EhAKC09QX0l0ZW1OYW1lEIcCEhIKDU9QX0l0ZW1QYWNrZXQQiAISEwoOT1Bf",
            "SXRlbVByZXZpZXcQiQISFwoST1BfSXRlbVJlY2FzdERlbGF5EIoCEhcKEk9Q",
            "X0l0ZW1WZXJpZnlSZXBseRCLAhIZChRPUF9JdGVtVmVyaWZ5UmVxdWVzdBCM",
            "AhIXChJPUF9JdGVtVmlld1Vua25vd24QjQISDAoHT1BfSnVtcBCOAhIPCgpP",
            "UF9LZXlSaW5nEI8CEhUKEE9QX0tub3dsZWRnZUJhc2UQkAISEgoNT1BfTERv",
            "TkJ1dHRvbhCRAhIXChJPUF9MRG9ORGlzYXJtVHJhcHMQkgISEwoOT1BfTERv",
            "Tkluc3BlY3QQkwISEAoLT1BfTERvTk9wZW4QlAISFAoPT1BfTERvTlBpY2tM",
            "b2NrEJUCEhYKEU9QX0xEb05TZW5zZVRyYXBzEJYCEhsKFk9QX0xlYWRlcnNo",
            "aXBFeHBUb2dnbGUQlwISGwoWT1BfTGVhZGVyc2hpcEV4cFVwZGF0ZRCYAhIW",
            "ChFPUF9MZWF2ZUFkdmVudHVyZRCZAhIRCgxPUF9MZWF2ZUJvYXQQmgISFwoS",
            "T1BfTGV2ZWxBcHBlYXJhbmNlEJsCEhMKDk9QX0xldmVsVXBkYXRlEJwCEhUK",
            "EE9QX0xGR0FwcGVhcmFuY2UQnQISEgoNT1BfTEZHQ29tbWFuZBCeAhIcChdP",
            "UF9MRkdHZXRNYXRjaGVzUmVxdWVzdBCfAhIdChhPUF9MRkdHZXRNYXRjaGVz",
            "UmVzcG9uc2UQoAISEwoOT1BfTEZHUmVzcG9uc2UQoQISDwoKT1BfTEZHdWls",
            "ZBCiAhISCg1PUF9MRlBDb21tYW5kEKMCEhwKF09QX0xGUEdldE1hdGNoZXNS",
            "ZXF1ZXN0EKQCEh0KGE9QX0xGUEdldE1hdGNoZXNSZXNwb25zZRClAhITCg5P",
            "UF9MaW5rZWRSZXVzZRCmAhIUCg9PUF9Mb2FkU3BlbGxTZXQQpwISDwoKT1Bf",
            "TG9jSW5mbxCoAhIYChNPUF9Mb2Nrb3V0VGltZXJJbmZvEKkCEg0KCE9QX0xv",
            "Z2luEKoCEhUKEE9QX0xvZ2luQWNjZXB0ZWQQqwISFQoQT1BfTG9naW5Db21w",
            "bGV0ZRCsAhIVChBPUF9Mb2dpblVua25vd24xEK0CEhUKEE9QX0xvZ2luVW5r",
            "bm93bjIQrgISDgoJT1BfTG9nb3V0EK8CEhMKDk9QX0xvZ291dFJlcGx5ELAC",
            "EhEKDE9QX0xvZ1NlcnZlchCxAhIUCg9PUF9Mb290Q29tcGxldGUQsgISEAoL",
            "T1BfTG9vdEl0ZW0QswISEwoOT1BfTG9vdFJlcXVlc3QQtAISEgoNT1BfTWFu",
            "YUNoYW5nZRC1AhISCg1PUF9NYW5hVXBkYXRlELYCEg8KCk9QX01hcmtOUEMQ",
            "twISDwoKT1BfTWFycXVlZRC4AhIVChBPUF9NZW1vcml6ZVNwZWxsELkCEgwK",
            "B09QX01lbmQQugISFAoPT1BfTWVuZEhQVXBkYXRlELsCEhcKEk9QX01lcmNl",
            "bmFyeUFzc2lnbhC8AhIYChNPUF9NZXJjZW5hcnlDb21tYW5kEL0CEhwKF09Q",
            "X01lcmNlbmFyeURhdGFSZXF1ZXN0EL4CEh0KGE9QX01lcmNlbmFyeURhdGFS",
            "ZXNwb25zZRC/AhIbChZPUF9NZXJjZW5hcnlEYXRhVXBkYXRlEMACEiIKHU9Q",
            "X01lcmNlbmFyeURhdGFVcGRhdGVSZXF1ZXN0EMECEhgKE09QX01lcmNlbmFy",
            "eURpc21pc3MQwgISFQoQT1BfTWVyY2VuYXJ5SGlyZRDDAhIfChpPUF9NZXJj",
            "ZW5hcnlTdXNwZW5kUmVxdWVzdBDEAhIgChtPUF9NZXJjZW5hcnlTdXNwZW5k",
            "UmVzcG9uc2UQxQISFgoRT1BfTWVyY2VuYXJ5VGltZXIQxgISHQoYT1BfTWVy",
            "Y2VuYXJ5VGltZXJSZXF1ZXN0EMcCEhkKFE9QX01lcmNlbmFyeVVua25vd24x",
            "EMgCEiIKHU9QX01lcmNlbmFyeVVuc3VzcGVuZFJlc3BvbnNlEMkCEhoKFU9Q",
            "X01vYkVuZHVyYW5jZVVwZGF0ZRDKAhIRCgxPUF9Nb2JIZWFsdGgQywISFQoQ",
            "T1BfTW9iTWFuYVVwZGF0ZRDMAhIRCgxPUF9Nb2JSZW5hbWUQzQISEQoMT1Bf",
            "TW9iVXBkYXRlEM4CEhUKEE9QX01vbmV5T25Db3Jwc2UQzwISEwoOT1BfTW9u",
            "ZXlVcGRhdGUQ0AISDAoHT1BfTU9URBDRAhIQCgtPUF9Nb3ZlQ29pbhDSAhIQ",
            "CgtPUF9Nb3ZlRG9vchDTAhIQCgtPUF9Nb3ZlSXRlbRDUAhIYChNPUF9Nb3Zl",
            "TG9nRGlzcmVnYXJkENUCEhYKEU9QX01vdmVMb2dSZXF1ZXN0ENYCEhQKD09Q",
            "X011bHRpTGluZU1zZxDXAhIQCgtPUF9OZXdTcGF3bhDYAhIaChVPUF9OZXdU",
            "aXRsZXNBdmFpbGFibGUQ2QISDwoKT1BfTmV3Wm9uZRDaAhIWChFPUF9Pbkxl",
            "dmVsTWVzc2FnZRDbAhIVChBPUF9PcGVuQ29udGFpbmVyENwCEhsKFk9QX09w",
            "ZW5EaXNjb3JkTWVyY2hhbnQQ3QISHgoZT1BfT3Blbkd1aWxkVHJpYnV0ZU1h",
            "c3RlchDeAhIVChBPUF9PcGVuSW52ZW50b3J5EN8CEhoKFU9QX09wZW5OZXdU",
            "YXNrc1dpbmRvdxDgAhIZChRPUF9PcGVuVHJpYnV0ZU1hc3RlchDhAhIXChJP",
            "UF9QRGVsZXRlUGV0aXRpb24Q4gISFQoQT1BfUGV0QnVmZldpbmRvdxDjAhIT",
            "Cg5PUF9QZXRDb21tYW5kcxDkAhIXChJPUF9QZXRDb21tYW5kU3RhdGUQ5QIS",
            "DwoKT1BfUGV0SG9UVBDmAhIQCgtPUF9QZXRpdGlvbhDnAhITCg5PUF9QZXRp",
            "dGlvbkJ1ZxDoAhIXChJPUF9QZXRpdGlvbkNoZWNrSW4Q6QISGAoTT1BfUGV0",
            "aXRpb25DaGVja291dBDqAhIZChRPUF9QZXRpdGlvbkNoZWNrb3V0MhDrAhIW",
            "ChFPUF9QZXRpdGlvbkRlbGV0ZRDsAhITCg5PUF9QZXRpdGlvblF1ZRDtAhIX",
            "ChJPUF9QZXRpdGlvblJlZnJlc2gQ7gISFwoST1BfUGV0aXRpb25SZXNvbHZl",
            "EO8CEhYKEU9QX1BldGl0aW9uU2VhcmNoEPACEh0KGE9QX1BldGl0aW9uU2Vh",
            "cmNoUmVzdWx0cxDxAhIaChVPUF9QZXRpdGlvblNlYXJjaFRleHQQ8gISGgoV",
            "T1BfUGV0aXRpb25VbkNoZWNrb3V0EPMCEhYKEU9QX1BldGl0aW9uVXBkYXRl",
            "EPQCEhIKDU9QX1BpY2tQb2NrZXQQ9QISFQoQT1BfUGxheWVyUHJvZmlsZRD2",
            "AhIWChFPUF9QbGF5ZXJTdGF0ZUFkZBD3AhIZChRPUF9QbGF5ZXJTdGF0ZVJl",
            "bW92ZRD4AhIcChdPUF9QbGF5RXZlcnF1ZXN0UmVxdWVzdBD5AhIdChhPUF9Q",
            "bGF5RXZlcnF1ZXN0UmVzcG9uc2UQ+gISDwoKT1BfUGxheU1QMxD7AhIMCgdP",
            "UF9Qb2xsEPwCEhQKD09QX1BvbGxSZXNwb25zZRD9AhIVChBPUF9Qb3B1cFJl",
            "c3BvbnNlEP4CEhYKEU9QX1Bvc3RFbnRlcldvcmxkEP8CEhIKDU9QX1BvdGlv",
            "bkJlbHQQgAMSFgoRT1BfUHJlTG9nb3V0UmVwbHkQgQMSHAoXT1BfUHVyY2hh",
            "c2VMZWFkZXJzaGlwQUEQggMSIgodT1BfUFZQTGVhZGVyQm9hcmREZXRhaWxz",
            "UmVwbHkQgwMSJAofT1BfUFZQTGVhZGVyQm9hcmREZXRhaWxzUmVxdWVzdBCE",
            "AxIbChZPUF9QVlBMZWFkZXJCb2FyZFJlcGx5EIUDEh0KGE9QX1BWUExlYWRl",
            "ckJvYXJkUmVxdWVzdBCGAxIQCgtPUF9QVlBTdGF0cxCHAxIaChVPUF9RdWVy",
            "eVJlc3BvbnNlVGhpbmcQiAMSEgoNT1BfUmFpZEludml0ZRCJAxIQCgtPUF9S",
            "YWlkSm9pbhCKAxISCg1PUF9SYWlkVXBkYXRlEIsDEhsKFk9QX1JhbmRvbU5h",
            "bWVHZW5lcmF0b3IQjAMSEwoOT1BfUmFuZG9tUmVwbHkQjQMSEQoMT1BfUmFu",
            "ZG9tUmVxEI4DEhAKC09QX1JlYWRCb29rEI8DEhkKFE9QX1JlY2lwZUF1dG9D",
            "b21iaW5lEJADEhUKEE9QX1JlY2lwZURldGFpbHMQkQMSEwoOT1BfUmVjaXBl",
            "UmVwbHkQkgMSFwoST1BfUmVjaXBlc0Zhdm9yaXRlEJMDEhUKEE9QX1JlY2lw",
            "ZXNTZWFyY2gQlAMSFwoST1BfUmVjbGFpbUNyeXN0YWxzEJUDEhAKC09QX1Jl",
            "bG9hZFVJEJYDEhYKEU9QX1JlbW92ZUFsbERvb3JzEJcDEhoKFU9QX1JlbW92",
            "ZUJsb2NrZWRCdWZmcxCYAxIaChVPUF9SZW1vdmVOaW1idXNFZmZlY3QQmQMS",
            "EgoNT1BfUmVtb3ZlVHJhcBCaAxIOCglPUF9SZXBvcnQQmwMSFgoRT1BfUmVx",
            "Q2xpZW50U3Bhd24QnAMSEgoNT1BfUmVxTmV3Wm9uZRCdAxIfChpPUF9SZXF1",
            "ZXN0Q2xpZW50Wm9uZUNoYW5nZRCeAxITCg5PUF9SZXF1ZXN0RHVlbBCfAxIc",
            "ChdPUF9SZXF1ZXN0S25vd2xlZGdlQmFzZRCgAxIVChBPUF9SZXF1ZXN0VGl0",
            "bGVzEKEDEhUKEE9QX1Jlc3Bhd25XaW5kb3cQogMSEQoMT1BfUmVzcG9uZEFB",
            "EKMDEhEKDE9QX1Jlc3RTdGF0ZRCkAxIOCglPUF9SZXdpbmQQpQMSEgoNT1Bf",
            "UmV6ekFuc3dlchCmAxIUCg9PUF9SZXp6Q29tcGxldGUQpwMSEwoOT1BfUmV6",
            "elJlcXVlc3QQqAMSEQoMT1BfU2FjcmlmaWNlEKkDEhcKEk9QX1NhZmVGYWxs",
            "U3VjY2VzcxCqAxIRCgxPUF9TYWZlUG9pbnQQqwMSDAoHT1BfU2F2ZRCsAxIV",
            "ChBPUF9TYXZlT25ab25lUmVxEK0DEhUKEE9QX1NlbGVjdFRyaWJ1dGUQrgMS",
            "EwoOT1BfU2VuZEFBU3RhdHMQrwMSEwoOT1BfU2VuZEFBVGFibGUQsAMSFAoP",
            "T1BfU2VuZENoYXJJbmZvELEDEhUKEE9QX1NlbmRFeHBab25laW4QsgMSGAoT",
            "T1BfU2VuZEZpbmRhYmxlTlBDcxCzAxIZChRPUF9TZW5kR3VpbGRUcmlidXRl",
            "cxC0AxIVChBPUF9TZW5kTG9naW5JbmZvELUDEhkKFE9QX1NlbmRNYXhDaGFy",
            "YWN0ZXJzELYDEhYKEU9QX1NlbmRNZW1iZXJzaGlwELcDEh0KGE9QX1NlbmRN",
            "ZW1iZXJzaGlwRGV0YWlscxC4AxIXChJPUF9TZW5kU3lzdGVtU3RhdHMQuQMS",
            "FQoQT1BfU2VuZFRpdGxlTGlzdBC6AxIUCg9PUF9TZW5kVHJpYnV0ZXMQuwMS",
            "FgoRT1BfU2VuZFpvbmVwb2ludHMQvAMSFAoPT1BfU2Vuc2VIZWFkaW5nEL0D",
            "EhIKDU9QX1NlbnNlVHJhcHMQvgMSGQoUT1BfU2VydmVyTGlzdFJlcXVlc3QQ",
            "vwMSGgoVT1BfU2VydmVyTGlzdFJlc3BvbnNlEMADEhQKD09QX1Nlc3Npb25S",
            "ZWFkeRDBAxIVChBPUF9TZXRDaGF0U2VydmVyEMIDEhYKEU9QX1NldENoYXRT",
            "ZXJ2ZXIyEMMDEhYKEU9QX1NldEdyb3VwVGFyZ2V0EMQDEhQKD09QX1NldEd1",
            "aWxkTU9URBDFAxIUCg9PUF9TZXRHdWlsZFJhbmsQxgMSEgoNT1BfU2V0UnVu",
            "TW9kZRDHAxIXChJPUF9TZXRTZXJ2ZXJGaWx0ZXIQyAMSFAoPT1BfU2V0U3Rh",
            "cnRDaXR5EMkDEhAKC09QX1NldFRpdGxlEMoDEhUKEE9QX1NldFRpdGxlUmVw",
            "bHkQywMSEQoMT1BfU2hpZWxkaW5nEMwDEhMKDk9QX1Nob3BEZWxJdGVtEM0D",
            "Eg8KCk9QX1Nob3BFbmQQzgMSFgoRT1BfU2hvcEVuZENvbmZpcm0QzwMSEAoL",
            "T1BfU2hvcEl0ZW0Q0AMSFQoQT1BfU2hvcFBsYXllckJ1eRDRAxIWChFPUF9T",
            "aG9wUGxheWVyU2VsbBDSAxITCg5PUF9TaG9wUmVxdWVzdBDTAxIVChBPUF9T",
            "aW1wbGVNZXNzYWdlENQDEhMKDk9QX1NraWxsVXBkYXRlENUDEg0KCE9QX1Nu",
            "ZWFrENYDEhkKFE9QX1NvbWUzQnl0ZUhQVXBkYXRlENcDEhkKFE9QX1NvbWU2",
            "Qnl0ZUhQVXBkYXRlENgDEhsKFk9QX1NvbWVJdGVtUGFja2V0TWF5YmUQ2QMS",
            "DQoIT1BfU291bmQQ2gMSFwoST1BfU3Bhd25BcHBlYXJhbmNlENsDEhEKDE9Q",
            "X1NwYXduRG9vchDcAxIbChZPUF9TcGF3blBvc2l0aW9uVXBkYXRlEN0DEhMK",
            "Dk9QX1NwZWNpYWxNZXNnEN4DEhMKDk9QX1NwZWxsRWZmZWN0EN8DEg0KCE9Q",
            "X1NwbGl0EOADEg8KCk9QX1N0YW1pbmEQ4QMSDAoHT1BfU3R1bhDiAxIPCgpP",
            "UF9TdXJuYW1lEOMDEhEKDE9QX1N3YXBTcGVsbBDkAxITCg5PUF9UYXJnZXRC",
            "dWZmcxDlAxIVChBPUF9UYXJnZXRDb21tYW5kEOYDEhIKDU9QX1RhcmdldEhv",
            "VFQQ5wMSEwoOT1BfVGFyZ2V0TW91c2UQ6AMSFAoPT1BfVGFyZ2V0UmVqZWN0",
            "EOkDEhQKD09QX1Rhc2tBY3Rpdml0eRDqAxIcChdPUF9UYXNrQWN0aXZpdHlD",
            "b21wbGV0ZRDrAxIXChJPUF9UYXNrRGVzY3JpcHRpb24Q7AMSGAoTT1BfVGFz",
            "a0hpc3RvcnlSZXBseRDtAxIaChVPUF9UYXNrSGlzdG9yeVJlcXVlc3QQ7gMS",
            "FgoRT1BfVGFza01lbWJlckxpc3QQ7wMSDQoIT1BfVGF1bnQQ8AMSEAoLT1Bf",
            "VGVzdEJ1ZmYQ8QMSCwoGT1BfVEdCEPIDEhEKDE9QX1RpbWVPZkRheRDzAxIN",
            "CghPUF9UcmFjaxD0AxITCg5PUF9UcmFja1RhcmdldBD1AxIUCg9PUF9UcmFj",
            "a1Vua25vd24Q9gMSGAoTT1BfVHJhZGVBY2NlcHRDbGljaxD3AxIRCgxPUF9U",
            "cmFkZUJ1c3kQ+AMSEgoNT1BfVHJhZGVDb2lucxD5AxIYChNPUF9UcmFkZU1v",
            "bmV5VXBkYXRlEPoDEg4KCU9QX1RyYWRlchD7AxIRCgxPUF9UcmFkZXJCdXkQ",
            "/AMSFQoQT1BfVHJhZGVyRGVsSXRlbRD9AxIUCg9PUF9UcmFkZVJlcXVlc3QQ",
            "/gMSFwoST1BfVHJhZGVSZXF1ZXN0QWNrEP8DEhgKE09QX1RyYWRlckl0ZW1V",
            "cGRhdGUQgAQSEgoNT1BfVHJhZGVyU2hvcBCBBBIZChRPUF9UcmFkZVNraWxs",
            "Q29tYmluZRCCBBITCg5PUF9UcmFuc2xvY2F0ZRCDBBITCg5PUF9UcmlidXRl",
            "SW5mbxCEBBITCg5PUF9UcmlidXRlSXRlbRCFBBIUCg9PUF9UcmlidXRlTW9u",
            "ZXkQhgQSEgoNT1BfVHJpYnV0ZU5QQxCHBBIaChVPUF9UcmlidXRlUG9pbnRV",
            "cGRhdGUQiAQSFAoPT1BfVHJpYnV0ZVRpbWVyEIkEEhUKEE9QX1RyaWJ1dGVU",
            "b2dnbGUQigQSFQoQT1BfVHJpYnV0ZVVwZGF0ZRCLBBIUCg9PUF9VbnRhcmdl",
            "dGFibGUQjAQSEAoLT1BfVXBkYXRlQUEQjQQSEgoNT1BfVXBkYXRlQXVyYRCO",
            "BBIaChVPUF9VcGRhdGVMZWFkZXJzaGlwQUEQjwQSFQoQT1BfVmV0Q2xhaW1S",
            "ZXBseRCQBBIXChJPUF9WZXRDbGFpbVJlcXVlc3QQkQQSGwoWT1BfVmV0UmV3",
            "YXJkc0F2YWxpYWJsZRCSBBIUCg9PUF9Wb2ljZU1hY3JvSW4QkwQSFQoQT1Bf",
            "Vm9pY2VNYWNyb091dBCUBBIUCg9PUF9XZWFwb25FcXVpcDEQlQQSEgoNT1Bf",
            "V2VhckNoYW5nZRCWBBIPCgpPUF9XZWF0aGVyEJcEEg8KCk9QX1dlYmxpbmsQ",
            "mAQSFQoQT1BfV2hvQWxsUmVxdWVzdBCZBBIWChFPUF9XaG9BbGxSZXNwb25z",
            "ZRCaBBIZChRPUF9Xb3JsZF9DbGllbnRfQ1JDMRCbBBIZChRPUF9Xb3JsZF9D",
            "bGllbnRfQ1JDMhCcBBIYChNPUF9Xb3JsZENsaWVudFJlYWR5EJ0EEhUKEE9Q",
            "X1dvcmxkQ29tcGxldGUQngQSEwoOT1BfV29ybGRMb2dvdXQQnwQSGAoTT1Bf",
            "V29ybGRPYmplY3RzU2VudBCgBBIXChJPUF9Xb3JsZFVua25vd24wMDEQoQQS",
            "HAoXT1BfWFRhcmdldEF1dG9BZGRIYXRlcnMQogQSEwoOT1BfWFRhcmdldE9w",
            "ZW4QowQSGwoWT1BfWFRhcmdldE9wZW5SZXNwb25zZRCkBBIWChFPUF9YVGFy",
            "Z2V0UmVxdWVzdBClBBIXChJPUF9YVGFyZ2V0UmVzcG9uc2UQpgQSEwoOT1Bf",
            "WWVsbEZvckhlbHAQpwQSEgoNT1BfWm9uZUNoYW5nZRCoBBIUCg9PUF9ab25l",
            "Q29tcGxldGUQqQQSEQoMT1BfWm9uZUVudHJ5EKoEEhUKEE9QX1pvbmVHdWls",
            "ZExpc3QQqwQSFQoQT1BfWm9uZUluVW5rbm93bhCsBBIYChNPUF9ab25lUGxh",
            "eWVyVG9CaW5kEK0EEhYKEU9QX1pvbmVTZXJ2ZXJJbmZvEK4EEhcKEk9QX1pv",
            "bmVTZXJ2ZXJSZWFkeRCvBBISCg1PUF9ab25lU3Bhd25zELAEEhMKDk9QX1pv",
            "bmVVbmF2YWlsELEEEg8KCk9QX1Jlc2V0QUEQsgQSDQoIT1BfQnVkZHkQswQS",
            "GwoWT1BfQ2hhbm5lbEFubm91bmNlSm9pbhC0BBIcChdPUF9DaGFubmVsQW5u",
            "b3VuY2VMZWF2ZRC1BBIOCglPUF9JZ25vcmUQtgQSDAoHT1BfTWFpbBC3BBIV",
            "ChBPUF9NYWlsYm94Q2hhbmdlELgEEhoKFU9QX01haWxEZWxpdmVyeVN0YXR1",
            "cxC5BBISCg1PUF9NYWlsSGVhZGVyELoEEhcKEk9QX01haWxIZWFkZXJDb3Vu",
            "dBC7BBIRCgxPUF9NYWlsTG9naW4QvAQSDwoKT1BfTWFpbE5ldxC9BBIUCg9P",
            "UF9NYWlsU2VuZEJvZHkQvgRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Eqproto.OpCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.ChannelMessage), global::Eqproto.ChannelMessage.Parser, new[]{ "ChanNum", "Language", "From", "To", "Message", "Guilddbid", "Deliverto", "Type", "Minstatus", "Fromadmin", "Noreply", "IsEmote", "Queued", "ZoneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.CommandMessage), global::Eqproto.CommandMessage.Parser, new[]{ "Author", "Command", "Params", "Result", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.DailyGain), global::Eqproto.DailyGain.Parser, new[]{ "AccountId", "CharacterId", "LevelsGained", "ExperienceGained", "MoneyEarned", "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Entity), global::Eqproto.Entity.Parser, new[]{ "Id", "Name", "Type", "Hp", "Level", "Position", "Race", "Class" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Entities), global::Eqproto.Entities.Parser, new[]{ "Entities_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Position), global::Eqproto.Position.Parser, new[]{ "X", "Y", "Z", "H" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.TextureProfile), global::Eqproto.TextureProfile.Parser, new[]{ "Head", "Chest", "Arms", "Wrist", "Hands", "Legs", "Feet", "Primary", "Secondary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Texture), global::Eqproto.Texture.Parser, new[]{ "Material", "Unknown1", "EliteModel", "HerosForgeModel", "Unknown2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.TintProfile), global::Eqproto.TintProfile.Parser, new[]{ "Head", "Chest", "Arms", "Wrist", "Hands", "Legs", "Feet", "Primary", "Secondary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Tint), global::Eqproto.Tint.Parser, new[]{ "Blue", "Green", "Red", "UseTint", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.Event), global::Eqproto.Event.Parser, new[]{ "Op", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.DeathEvent), global::Eqproto.DeathEvent.Parser, new[]{ "SpawnId", "KillerId", "CorpseId", "BindZoneId", "SpellId", "AttackSkillId", "Damage", "Unknown028" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.DamageEvent), global::Eqproto.DamageEvent.Parser, new[]{ "Target", "Source", "Type", "Spellid", "Damage", "Force", "MeleepushXy", "MeleepushZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.EntityEvent), global::Eqproto.EntityEvent.Parser, new[]{ "EntityId", "TargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.ChannelMessageEvent), global::Eqproto.ChannelMessageEvent.Parser, new[]{ "TargetName", "Sender", "Language", "ChanNum", "CmUnknown4", "SkillInLanguage", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.WearChangeEvent), global::Eqproto.WearChangeEvent.Parser, new[]{ "SpawnId", "Material", "Unknown06", "EliteMaterial", "HeroForgeModel", "Unknown18", "Color", "WearSlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.DeleteSpawnEvent), global::Eqproto.DeleteSpawnEvent.Parser, new[]{ "SpawnId", "Decay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.HPEvent), global::Eqproto.HPEvent.Parser, new[]{ "SpawnId", "CurHp", "MaxHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.PlayerPositionUpdateEvent), global::Eqproto.PlayerPositionUpdateEvent.Parser, new[]{ "SpawnId", "DeltaHeading", "XPos", "Padding0002", "YPos", "Animation", "Padding0006", "ZPos", "DeltaY", "DeltaX", "Heading", "Padding0014", "DeltaZ", "Padding0018" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.AnimationEvent), global::Eqproto.AnimationEvent.Parser, new[]{ "Spawnid", "Speed", "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eqproto.SpawnEvent), global::Eqproto.SpawnEvent.Parser, new[]{ "Unknown0000", "Gm", "Unknown0003", "Aaitle", "Unknown0004", "Anon", "Face", "Name", "Deity", "Unknown0073", "Size", "Unknown0079", "NPC", "Invis", "Haircolor", "CurHp", "MaxHp", "Findable", "Unknown0089", "DeltaHeading", "X", "Padding0054", "Y", "Animation", "Padding0058", "Z", "DeltaY", "DeltaX", "Heading", "Padding0066", "DeltaZ", "Padding0070", "Eyecolor1", "Unknown0115", "StandState", "DrakkinHeritage", "DrakkinTattoo", "DrakkinDetails", "Showhelm", "Unknown0140", "IsNpc", "Hairstyle", "Beard", "Unknown0147", "Level", "PlayerState", "Beardcolor", "Suffix", "PetOwnerId", "Guildrank", "Unknown0194", "Equipment", "Runspeed", "Afk", "GuildID", "Title", "Unknown0274", "SetTo0XFF", "Helm", "Race", "Unknown0288", "LastName", "Walkspeed", "Unknown0328", "IsPet", "Light", "Class", "Eyecolor2", "Flymode", "Gender", "Bodytype", "Unknown0336", "EquipChest2", "MountColor", "SpawnId", "Unknown0344", "IsMercenary", "EquipmentTint", "Lfg", "DestructibleObject", "DestructibleModel", "DestructibleName2", "DestructibleString", "DestructibleAppearance", "DestructibleUnk1", "DestructibleID1", "DestructibleID2", "DestructibleID3", "DestructibleID4", "DestructibleUnk2", "DestructibleUnk3", "DestructibleUnk4", "DestructibleUnk5", "DestructibleUnk6", "DestructibleUnk7", "DestructibleUnk8", "DestructibleUnk9", "TargetableWithHotkey", "ShowName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OpCode {
    /// <summary>
    ///option allow_alias = true;
    /// </summary>
    [pbr::OriginalName("OP_Unknown")] OpUnknown = 0,
    [pbr::OriginalName("OP_ExploreUnknown")] OpExploreUnknown = 1,
    [pbr::OriginalName("OP_0x0193")] Op0X0193 = 2,
    [pbr::OriginalName("OP_0x0347")] Op0X0347 = 3,
    [pbr::OriginalName("OP_AAAction")] OpAaaction = 4,
    [pbr::OriginalName("OP_AAExpUpdate")] OpAaexpUpdate = 5,
    [pbr::OriginalName("OP_AcceptNewTask")] OpAcceptNewTask = 6,
    [pbr::OriginalName("OP_AckPacket")] OpAckPacket = 7,
    [pbr::OriginalName("OP_Action")] OpAction = 8,
    [pbr::OriginalName("OP_Action2")] OpAction2 = 9,
    [pbr::OriginalName("OP_AddNimbusEffect")] OpAddNimbusEffect = 10,
    [pbr::OriginalName("OP_AdventureData")] OpAdventureData = 11,
    [pbr::OriginalName("OP_AdventureDetails")] OpAdventureDetails = 12,
    [pbr::OriginalName("OP_AdventureFinish")] OpAdventureFinish = 13,
    [pbr::OriginalName("OP_AdventureInfo")] OpAdventureInfo = 14,
    [pbr::OriginalName("OP_AdventureInfoRequest")] OpAdventureInfoRequest = 15,
    [pbr::OriginalName("OP_AdventureLeaderboardReply")] OpAdventureLeaderboardReply = 16,
    [pbr::OriginalName("OP_AdventureLeaderboardRequest")] OpAdventureLeaderboardRequest = 17,
    [pbr::OriginalName("OP_AdventureMerchantPurchase")] OpAdventureMerchantPurchase = 18,
    [pbr::OriginalName("OP_AdventureMerchantRequest")] OpAdventureMerchantRequest = 19,
    [pbr::OriginalName("OP_AdventureMerchantResponse")] OpAdventureMerchantResponse = 20,
    [pbr::OriginalName("OP_AdventureMerchantSell")] OpAdventureMerchantSell = 21,
    [pbr::OriginalName("OP_AdventurePointsUpdate")] OpAdventurePointsUpdate = 22,
    [pbr::OriginalName("OP_AdventureRequest")] OpAdventureRequest = 23,
    [pbr::OriginalName("OP_AdventureStatsReply")] OpAdventureStatsReply = 24,
    [pbr::OriginalName("OP_AdventureStatsRequest")] OpAdventureStatsRequest = 25,
    [pbr::OriginalName("OP_AdventureUpdate")] OpAdventureUpdate = 26,
    [pbr::OriginalName("OP_AggroMeterLockTarget")] OpAggroMeterLockTarget = 27,
    [pbr::OriginalName("OP_AggroMeterTargetInfo")] OpAggroMeterTargetInfo = 28,
    [pbr::OriginalName("OP_AggroMeterUpdate")] OpAggroMeterUpdate = 29,
    [pbr::OriginalName("OP_AltCurrency")] OpAltCurrency = 30,
    [pbr::OriginalName("OP_AltCurrencyMerchantReply")] OpAltCurrencyMerchantReply = 31,
    [pbr::OriginalName("OP_AltCurrencyMerchantRequest")] OpAltCurrencyMerchantRequest = 32,
    [pbr::OriginalName("OP_AltCurrencyPurchase")] OpAltCurrencyPurchase = 33,
    [pbr::OriginalName("OP_AltCurrencyReclaim")] OpAltCurrencyReclaim = 34,
    [pbr::OriginalName("OP_AltCurrencySell")] OpAltCurrencySell = 35,
    [pbr::OriginalName("OP_AltCurrencySellSelection")] OpAltCurrencySellSelection = 36,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_Animation")] OpAnimation = 37,
    [pbr::OriginalName("OP_AnnoyingZoneUnknown")] OpAnnoyingZoneUnknown = 38,
    [pbr::OriginalName("OP_ApplyPoison")] OpApplyPoison = 39,
    [pbr::OriginalName("OP_ApproveName")] OpApproveName = 40,
    [pbr::OriginalName("OP_ApproveWorld")] OpApproveWorld = 41,
    [pbr::OriginalName("OP_ApproveZone")] OpApproveZone = 42,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_Assist")] OpAssist = 43,
    [pbr::OriginalName("OP_AssistGroup")] OpAssistGroup = 44,
    [pbr::OriginalName("OP_AugmentInfo")] OpAugmentInfo = 45,
    [pbr::OriginalName("OP_AugmentItem")] OpAugmentItem = 46,
    [pbr::OriginalName("OP_AutoAttack")] OpAutoAttack = 47,
    [pbr::OriginalName("OP_AutoAttack2")] OpAutoAttack2 = 48,
    [pbr::OriginalName("OP_AutoFire")] OpAutoFire = 49,
    [pbr::OriginalName("OP_Bandolier")] OpBandolier = 50,
    [pbr::OriginalName("OP_BankerChange")] OpBankerChange = 51,
    [pbr::OriginalName("OP_Barter")] OpBarter = 52,
    [pbr::OriginalName("OP_Bazaar")] OpBazaar = 53,
    [pbr::OriginalName("OP_BazaarInspect")] OpBazaarInspect = 54,
    [pbr::OriginalName("OP_BazaarSearch")] OpBazaarSearch = 55,
    [pbr::OriginalName("OP_BecomeCorpse")] OpBecomeCorpse = 56,
    [pbr::OriginalName("OP_BecomeTrader")] OpBecomeTrader = 57,
    [pbr::OriginalName("OP_Begging")] OpBegging = 58,
    [pbr::OriginalName("OP_BeginCast")] OpBeginCast = 59,
    [pbr::OriginalName("OP_Bind_Wound")] OpBindWound = 60,
    [pbr::OriginalName("OP_BlockedBuffs")] OpBlockedBuffs = 61,
    [pbr::OriginalName("OP_BoardBoat")] OpBoardBoat = 62,
    [pbr::OriginalName("OP_Buff")] OpBuff = 63,
    [pbr::OriginalName("OP_BuffCreate")] OpBuffCreate = 64,
    [pbr::OriginalName("OP_BuffRemoveRequest")] OpBuffRemoveRequest = 65,
    [pbr::OriginalName("OP_Bug")] OpBug = 66,
    [pbr::OriginalName("OP_CameraEffect")] OpCameraEffect = 67,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_Camp")] OpCamp = 68,
    [pbr::OriginalName("OP_CancelSneakHide")] OpCancelSneakHide = 69,
    [pbr::OriginalName("OP_CancelTask")] OpCancelTask = 70,
    [pbr::OriginalName("OP_CancelTrade")] OpCancelTrade = 71,
    [pbr::OriginalName("OP_CastSpell")] OpCastSpell = 72,
    [pbr::OriginalName("OP_ChangeSize")] OpChangeSize = 73,
    [pbr::OriginalName("OP_ChannelMessage")] OpChannelMessage = 74,
    [pbr::OriginalName("OP_CharacterCreate")] OpCharacterCreate = 75,
    [pbr::OriginalName("OP_CharacterCreateRequest")] OpCharacterCreateRequest = 76,
    [pbr::OriginalName("OP_CharInventory")] OpCharInventory = 77,
    [pbr::OriginalName("OP_Charm")] OpCharm = 78,
    /// <summary>
    ///used by lua
    /// </summary>
    [pbr::OriginalName("OP_ChatMessage")] OpChatMessage = 79,
    [pbr::OriginalName("OP_ClearAA")] OpClearAa = 80,
    [pbr::OriginalName("OP_ClearBlockedBuffs")] OpClearBlockedBuffs = 81,
    [pbr::OriginalName("OP_ClearLeadershipAbilities")] OpClearLeadershipAbilities = 82,
    [pbr::OriginalName("OP_ClearNPCMarks")] OpClearNpcmarks = 83,
    [pbr::OriginalName("OP_ClearObject")] OpClearObject = 84,
    [pbr::OriginalName("OP_ClearSurname")] OpClearSurname = 85,
    [pbr::OriginalName("OP_ClickDoor")] OpClickDoor = 86,
    [pbr::OriginalName("OP_ClickObject")] OpClickObject = 87,
    [pbr::OriginalName("OP_ClickObjectAction")] OpClickObjectAction = 88,
    [pbr::OriginalName("OP_ClientError")] OpClientError = 89,
    [pbr::OriginalName("OP_ClientReady")] OpClientReady = 90,
    [pbr::OriginalName("OP_ClientTimeStamp")] OpClientTimeStamp = 91,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_ClientUpdate")] OpClientUpdate = 92,
    [pbr::OriginalName("OP_CloseContainer")] OpCloseContainer = 93,
    [pbr::OriginalName("OP_CloseTributeMaster")] OpCloseTributeMaster = 94,
    [pbr::OriginalName("OP_ColoredText")] OpColoredText = 95,
    [pbr::OriginalName("OP_CombatAbility")] OpCombatAbility = 96,
    [pbr::OriginalName("OP_Command")] OpCommand = 97,
    [pbr::OriginalName("OP_CompletedTasks")] OpCompletedTasks = 98,
    [pbr::OriginalName("OP_ConfirmDelete")] OpConfirmDelete = 99,
    [pbr::OriginalName("OP_Consent")] OpConsent = 100,
    [pbr::OriginalName("OP_ConsentDeny")] OpConsentDeny = 101,
    [pbr::OriginalName("OP_ConsentResponse")] OpConsentResponse = 102,
    [pbr::OriginalName("OP_Consider")] OpConsider = 103,
    [pbr::OriginalName("OP_ConsiderCorpse")] OpConsiderCorpse = 104,
    [pbr::OriginalName("OP_Consume")] OpConsume = 105,
    [pbr::OriginalName("OP_ControlBoat")] OpControlBoat = 106,
    [pbr::OriginalName("OP_CorpseDrag")] OpCorpseDrag = 107,
    [pbr::OriginalName("OP_CorpseDrop")] OpCorpseDrop = 108,
    [pbr::OriginalName("OP_CrashDump")] OpCrashDump = 109,
    [pbr::OriginalName("OP_CrystalCountUpdate")] OpCrystalCountUpdate = 110,
    [pbr::OriginalName("OP_CrystalCreate")] OpCrystalCreate = 111,
    [pbr::OriginalName("OP_CrystalReclaim")] OpCrystalReclaim = 112,
    [pbr::OriginalName("OP_CustomTitles")] OpCustomTitles = 113,
    [pbr::OriginalName("OP_Damage")] OpDamage = 114,
    [pbr::OriginalName("OP_Death")] OpDeath = 115,
    [pbr::OriginalName("OP_DelegateAbility")] OpDelegateAbility = 116,
    [pbr::OriginalName("OP_DeleteCharacter")] OpDeleteCharacter = 117,
    [pbr::OriginalName("OP_DeleteCharge")] OpDeleteCharge = 118,
    [pbr::OriginalName("OP_DeleteItem")] OpDeleteItem = 119,
    [pbr::OriginalName("OP_DeletePetition")] OpDeletePetition = 120,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_DeleteSpawn")] OpDeleteSpawn = 121,
    [pbr::OriginalName("OP_DeleteSpell")] OpDeleteSpell = 122,
    [pbr::OriginalName("OP_DenyResponse")] OpDenyResponse = 123,
    [pbr::OriginalName("OP_Disarm")] OpDisarm = 124,
    [pbr::OriginalName("OP_DisarmTraps")] OpDisarmTraps = 125,
    [pbr::OriginalName("OP_DisciplineTimer")] OpDisciplineTimer = 126,
    [pbr::OriginalName("OP_DisciplineUpdate")] OpDisciplineUpdate = 127,
    [pbr::OriginalName("OP_DiscordMerchantInventory")] OpDiscordMerchantInventory = 128,
    [pbr::OriginalName("OP_DoGroupLeadershipAbility")] OpDoGroupLeadershipAbility = 129,
    [pbr::OriginalName("OP_DuelResponse")] OpDuelResponse = 130,
    [pbr::OriginalName("OP_DuelResponse2")] OpDuelResponse2 = 131,
    [pbr::OriginalName("OP_DumpName")] OpDumpName = 132,
    [pbr::OriginalName("OP_Dye")] OpDye = 133,
    [pbr::OriginalName("OP_DynamicWall")] OpDynamicWall = 134,
    [pbr::OriginalName("OP_DzAddPlayer")] OpDzAddPlayer = 135,
    [pbr::OriginalName("OP_DzChooseZone")] OpDzChooseZone = 136,
    [pbr::OriginalName("OP_DzCompass")] OpDzCompass = 137,
    [pbr::OriginalName("OP_DzExpeditionEndsWarning")] OpDzExpeditionEndsWarning = 138,
    [pbr::OriginalName("OP_DzExpeditionInfo")] OpDzExpeditionInfo = 139,
    [pbr::OriginalName("OP_DzExpeditionList")] OpDzExpeditionList = 140,
    [pbr::OriginalName("OP_DzJoinExpeditionConfirm")] OpDzJoinExpeditionConfirm = 141,
    [pbr::OriginalName("OP_DzJoinExpeditionReply")] OpDzJoinExpeditionReply = 142,
    [pbr::OriginalName("OP_DzLeaderStatus")] OpDzLeaderStatus = 143,
    [pbr::OriginalName("OP_DzListTimers")] OpDzListTimers = 144,
    [pbr::OriginalName("OP_DzMakeLeader")] OpDzMakeLeader = 145,
    [pbr::OriginalName("OP_DzMemberList")] OpDzMemberList = 146,
    [pbr::OriginalName("OP_DzMemberStatus")] OpDzMemberStatus = 147,
    [pbr::OriginalName("OP_DzPlayerList")] OpDzPlayerList = 148,
    [pbr::OriginalName("OP_DzQuit")] OpDzQuit = 149,
    [pbr::OriginalName("OP_DzRemovePlayer")] OpDzRemovePlayer = 150,
    [pbr::OriginalName("OP_DzSwapPlayer")] OpDzSwapPlayer = 151,
    [pbr::OriginalName("OP_Emote")] OpEmote = 152,
    [pbr::OriginalName("OP_EndLootRequest")] OpEndLootRequest = 153,
    [pbr::OriginalName("OP_EnduranceUpdate")] OpEnduranceUpdate = 154,
    [pbr::OriginalName("OP_EnterChat")] OpEnterChat = 155,
    [pbr::OriginalName("OP_EnterWorld")] OpEnterWorld = 156,
    [pbr::OriginalName("OP_EnvDamage")] OpEnvDamage = 157,
    [pbr::OriginalName("OP_ExpansionInfo")] OpExpansionInfo = 158,
    [pbr::OriginalName("OP_ExpUpdate")] OpExpUpdate = 159,
    [pbr::OriginalName("OP_FaceChange")] OpFaceChange = 160,
    [pbr::OriginalName("OP_Feedback")] OpFeedback = 161,
    [pbr::OriginalName("OP_FeignDeath")] OpFeignDeath = 162,
    [pbr::OriginalName("OP_FellowshipUpdate")] OpFellowshipUpdate = 163,
    [pbr::OriginalName("OP_FindPersonReply")] OpFindPersonReply = 164,
    [pbr::OriginalName("OP_FindPersonRequest")] OpFindPersonRequest = 165,
    [pbr::OriginalName("OP_FinishTrade")] OpFinishTrade = 166,
    [pbr::OriginalName("OP_FinishWindow")] OpFinishWindow = 167,
    [pbr::OriginalName("OP_FinishWindow2")] OpFinishWindow2 = 168,
    [pbr::OriginalName("OP_Fishing")] OpFishing = 169,
    [pbr::OriginalName("OP_Fling")] OpFling = 170,
    [pbr::OriginalName("OP_FloatListThing")] OpFloatListThing = 171,
    [pbr::OriginalName("OP_Forage")] OpForage = 172,
    [pbr::OriginalName("OP_ForceFindPerson")] OpForceFindPerson = 173,
    [pbr::OriginalName("OP_FormattedMessage")] OpFormattedMessage = 174,
    [pbr::OriginalName("OP_FriendsWho")] OpFriendsWho = 175,
    [pbr::OriginalName("OP_GetGuildMOTD")] OpGetGuildMotd = 176,
    [pbr::OriginalName("OP_GetGuildMOTDReply")] OpGetGuildMotdreply = 177,
    [pbr::OriginalName("OP_GetGuildsList")] OpGetGuildsList = 178,
    [pbr::OriginalName("OP_GiveMoney")] OpGiveMoney = 179,
    [pbr::OriginalName("OP_GMApproval")] OpGmapproval = 180,
    [pbr::OriginalName("OP_GMBecomeNPC")] OpGmbecomeNpc = 181,
    [pbr::OriginalName("OP_GMDelCorpse")] OpGmdelCorpse = 182,
    [pbr::OriginalName("OP_GMEmoteZone")] OpGmemoteZone = 183,
    [pbr::OriginalName("OP_GMEndTraining")] OpGmendTraining = 184,
    [pbr::OriginalName("OP_GMEndTrainingResponse")] OpGmendTrainingResponse = 185,
    [pbr::OriginalName("OP_GMFind")] OpGmfind = 186,
    [pbr::OriginalName("OP_GMGoto")] OpGmgoto = 187,
    [pbr::OriginalName("OP_GMHideMe")] OpGmhideMe = 188,
    [pbr::OriginalName("OP_GMKick")] OpGmkick = 189,
    [pbr::OriginalName("OP_GMKill")] OpGmkill = 190,
    [pbr::OriginalName("OP_GMLastName")] OpGmlastName = 191,
    [pbr::OriginalName("OP_GMNameChange")] OpGmnameChange = 192,
    [pbr::OriginalName("OP_GMSearchCorpse")] OpGmsearchCorpse = 193,
    [pbr::OriginalName("OP_GMServers")] OpGmservers = 194,
    [pbr::OriginalName("OP_GMSummon")] OpGmsummon = 195,
    [pbr::OriginalName("OP_GMToggle")] OpGmtoggle = 196,
    [pbr::OriginalName("OP_GMTraining")] OpGmtraining = 197,
    [pbr::OriginalName("OP_GMTrainSkill")] OpGmtrainSkill = 198,
    [pbr::OriginalName("OP_GMTrainSkillConfirm")] OpGmtrainSkillConfirm = 199,
    [pbr::OriginalName("OP_GMZoneRequest")] OpGmzoneRequest = 200,
    [pbr::OriginalName("OP_GMZoneRequest2")] OpGmzoneRequest2 = 201,
    [pbr::OriginalName("OP_GroundSpawn")] OpGroundSpawn = 202,
    [pbr::OriginalName("OP_GroupAcknowledge")] OpGroupAcknowledge = 203,
    [pbr::OriginalName("OP_GroupCancelInvite")] OpGroupCancelInvite = 204,
    [pbr::OriginalName("OP_GroupDelete")] OpGroupDelete = 205,
    [pbr::OriginalName("OP_GroupDisband")] OpGroupDisband = 206,
    [pbr::OriginalName("OP_GroupDisbandOther")] OpGroupDisbandOther = 207,
    [pbr::OriginalName("OP_GroupDisbandYou")] OpGroupDisbandYou = 208,
    [pbr::OriginalName("OP_GroupFollow")] OpGroupFollow = 209,
    [pbr::OriginalName("OP_GroupFollow2")] OpGroupFollow2 = 210,
    [pbr::OriginalName("OP_GroupInvite")] OpGroupInvite = 211,
    [pbr::OriginalName("OP_GroupInvite2")] OpGroupInvite2 = 212,
    [pbr::OriginalName("OP_GroupLeaderChange")] OpGroupLeaderChange = 213,
    [pbr::OriginalName("OP_GroupLeadershipAAUpdate")] OpGroupLeadershipAaupdate = 214,
    [pbr::OriginalName("OP_GroupMakeLeader")] OpGroupMakeLeader = 215,
    [pbr::OriginalName("OP_GroupMentor")] OpGroupMentor = 216,
    [pbr::OriginalName("OP_GroupRoles")] OpGroupRoles = 217,
    [pbr::OriginalName("OP_GroupUpdate")] OpGroupUpdate = 218,
    [pbr::OriginalName("OP_GroupUpdateB")] OpGroupUpdateB = 219,
    [pbr::OriginalName("OP_GroupUpdateLeaderAA")] OpGroupUpdateLeaderAa = 220,
    [pbr::OriginalName("OP_GuildBank")] OpGuildBank = 221,
    [pbr::OriginalName("OP_GuildBankItemList")] OpGuildBankItemList = 222,
    [pbr::OriginalName("OP_GuildCreate")] OpGuildCreate = 223,
    [pbr::OriginalName("OP_GuildDelete")] OpGuildDelete = 224,
    [pbr::OriginalName("OP_GuildDemote")] OpGuildDemote = 225,
    [pbr::OriginalName("OP_GuildInvite")] OpGuildInvite = 226,
    [pbr::OriginalName("OP_GuildInviteAccept")] OpGuildInviteAccept = 227,
    [pbr::OriginalName("OP_GuildLeader")] OpGuildLeader = 228,
    [pbr::OriginalName("OP_GuildManageAdd")] OpGuildManageAdd = 229,
    [pbr::OriginalName("OP_GuildManageBanker")] OpGuildManageBanker = 230,
    [pbr::OriginalName("OP_GuildManageRemove")] OpGuildManageRemove = 231,
    [pbr::OriginalName("OP_GuildManageStatus")] OpGuildManageStatus = 232,
    [pbr::OriginalName("OP_GuildMemberLevelUpdate")] OpGuildMemberLevelUpdate = 233,
    [pbr::OriginalName("OP_GuildMemberList")] OpGuildMemberList = 234,
    [pbr::OriginalName("OP_GuildMemberUpdate")] OpGuildMemberUpdate = 235,
    [pbr::OriginalName("OP_GuildMOTD")] OpGuildMotd = 236,
    [pbr::OriginalName("OP_GuildPeace")] OpGuildPeace = 237,
    [pbr::OriginalName("OP_GuildPromote")] OpGuildPromote = 238,
    [pbr::OriginalName("OP_GuildPublicNote")] OpGuildPublicNote = 239,
    [pbr::OriginalName("OP_GuildRemove")] OpGuildRemove = 240,
    [pbr::OriginalName("OP_GuildsList")] OpGuildsList = 241,
    [pbr::OriginalName("OP_GuildStatus")] OpGuildStatus = 242,
    [pbr::OriginalName("OP_GuildTributeInfo")] OpGuildTributeInfo = 243,
    [pbr::OriginalName("OP_GuildUpdateURLAndChannel")] OpGuildUpdateUrlandChannel = 244,
    [pbr::OriginalName("OP_GuildWar")] OpGuildWar = 245,
    [pbr::OriginalName("OP_Heartbeat")] OpHeartbeat = 246,
    [pbr::OriginalName("OP_Hide")] OpHide = 247,
    [pbr::OriginalName("OP_HideCorpse")] OpHideCorpse = 248,
    /// <summary>
    ///supported 
    /// </summary>
    [pbr::OriginalName("OP_HPUpdate")] OpHpupdate = 249,
    [pbr::OriginalName("OP_Illusion")] OpIllusion = 250,
    [pbr::OriginalName("OP_IncreaseStats")] OpIncreaseStats = 251,
    [pbr::OriginalName("OP_InitialHPUpdate")] OpInitialHpupdate = 252,
    [pbr::OriginalName("OP_InitialMobHealth")] OpInitialMobHealth = 253,
    [pbr::OriginalName("OP_InspectAnswer")] OpInspectAnswer = 254,
    [pbr::OriginalName("OP_InspectBuffs")] OpInspectBuffs = 255,
    [pbr::OriginalName("OP_InspectMessageUpdate")] OpInspectMessageUpdate = 256,
    [pbr::OriginalName("OP_InspectRequest")] OpInspectRequest = 257,
    [pbr::OriginalName("OP_InstillDoubt")] OpInstillDoubt = 258,
    [pbr::OriginalName("OP_InterruptCast")] OpInterruptCast = 259,
    [pbr::OriginalName("OP_ItemLinkClick")] OpItemLinkClick = 260,
    [pbr::OriginalName("OP_ItemLinkResponse")] OpItemLinkResponse = 261,
    [pbr::OriginalName("OP_ItemLinkText")] OpItemLinkText = 262,
    [pbr::OriginalName("OP_ItemName")] OpItemName = 263,
    [pbr::OriginalName("OP_ItemPacket")] OpItemPacket = 264,
    [pbr::OriginalName("OP_ItemPreview")] OpItemPreview = 265,
    [pbr::OriginalName("OP_ItemRecastDelay")] OpItemRecastDelay = 266,
    [pbr::OriginalName("OP_ItemVerifyReply")] OpItemVerifyReply = 267,
    [pbr::OriginalName("OP_ItemVerifyRequest")] OpItemVerifyRequest = 268,
    [pbr::OriginalName("OP_ItemViewUnknown")] OpItemViewUnknown = 269,
    [pbr::OriginalName("OP_Jump")] OpJump = 270,
    [pbr::OriginalName("OP_KeyRing")] OpKeyRing = 271,
    [pbr::OriginalName("OP_KnowledgeBase")] OpKnowledgeBase = 272,
    [pbr::OriginalName("OP_LDoNButton")] OpLdoNbutton = 273,
    [pbr::OriginalName("OP_LDoNDisarmTraps")] OpLdoNdisarmTraps = 274,
    [pbr::OriginalName("OP_LDoNInspect")] OpLdoNinspect = 275,
    [pbr::OriginalName("OP_LDoNOpen")] OpLdoNopen = 276,
    [pbr::OriginalName("OP_LDoNPickLock")] OpLdoNpickLock = 277,
    [pbr::OriginalName("OP_LDoNSenseTraps")] OpLdoNsenseTraps = 278,
    [pbr::OriginalName("OP_LeadershipExpToggle")] OpLeadershipExpToggle = 279,
    [pbr::OriginalName("OP_LeadershipExpUpdate")] OpLeadershipExpUpdate = 280,
    [pbr::OriginalName("OP_LeaveAdventure")] OpLeaveAdventure = 281,
    [pbr::OriginalName("OP_LeaveBoat")] OpLeaveBoat = 282,
    [pbr::OriginalName("OP_LevelAppearance")] OpLevelAppearance = 283,
    [pbr::OriginalName("OP_LevelUpdate")] OpLevelUpdate = 284,
    [pbr::OriginalName("OP_LFGAppearance")] OpLfgappearance = 285,
    [pbr::OriginalName("OP_LFGCommand")] OpLfgcommand = 286,
    [pbr::OriginalName("OP_LFGGetMatchesRequest")] OpLfggetMatchesRequest = 287,
    [pbr::OriginalName("OP_LFGGetMatchesResponse")] OpLfggetMatchesResponse = 288,
    [pbr::OriginalName("OP_LFGResponse")] OpLfgresponse = 289,
    [pbr::OriginalName("OP_LFGuild")] OpLfguild = 290,
    [pbr::OriginalName("OP_LFPCommand")] OpLfpcommand = 291,
    [pbr::OriginalName("OP_LFPGetMatchesRequest")] OpLfpgetMatchesRequest = 292,
    [pbr::OriginalName("OP_LFPGetMatchesResponse")] OpLfpgetMatchesResponse = 293,
    [pbr::OriginalName("OP_LinkedReuse")] OpLinkedReuse = 294,
    [pbr::OriginalName("OP_LoadSpellSet")] OpLoadSpellSet = 295,
    [pbr::OriginalName("OP_LocInfo")] OpLocInfo = 296,
    [pbr::OriginalName("OP_LockoutTimerInfo")] OpLockoutTimerInfo = 297,
    [pbr::OriginalName("OP_Login")] OpLogin = 298,
    [pbr::OriginalName("OP_LoginAccepted")] OpLoginAccepted = 299,
    [pbr::OriginalName("OP_LoginComplete")] OpLoginComplete = 300,
    [pbr::OriginalName("OP_LoginUnknown1")] OpLoginUnknown1 = 301,
    [pbr::OriginalName("OP_LoginUnknown2")] OpLoginUnknown2 = 302,
    [pbr::OriginalName("OP_Logout")] OpLogout = 303,
    [pbr::OriginalName("OP_LogoutReply")] OpLogoutReply = 304,
    [pbr::OriginalName("OP_LogServer")] OpLogServer = 305,
    [pbr::OriginalName("OP_LootComplete")] OpLootComplete = 306,
    [pbr::OriginalName("OP_LootItem")] OpLootItem = 307,
    [pbr::OriginalName("OP_LootRequest")] OpLootRequest = 308,
    [pbr::OriginalName("OP_ManaChange")] OpManaChange = 309,
    [pbr::OriginalName("OP_ManaUpdate")] OpManaUpdate = 310,
    [pbr::OriginalName("OP_MarkNPC")] OpMarkNpc = 311,
    [pbr::OriginalName("OP_Marquee")] OpMarquee = 312,
    [pbr::OriginalName("OP_MemorizeSpell")] OpMemorizeSpell = 313,
    [pbr::OriginalName("OP_Mend")] OpMend = 314,
    [pbr::OriginalName("OP_MendHPUpdate")] OpMendHpupdate = 315,
    [pbr::OriginalName("OP_MercenaryAssign")] OpMercenaryAssign = 316,
    [pbr::OriginalName("OP_MercenaryCommand")] OpMercenaryCommand = 317,
    [pbr::OriginalName("OP_MercenaryDataRequest")] OpMercenaryDataRequest = 318,
    [pbr::OriginalName("OP_MercenaryDataResponse")] OpMercenaryDataResponse = 319,
    [pbr::OriginalName("OP_MercenaryDataUpdate")] OpMercenaryDataUpdate = 320,
    [pbr::OriginalName("OP_MercenaryDataUpdateRequest")] OpMercenaryDataUpdateRequest = 321,
    [pbr::OriginalName("OP_MercenaryDismiss")] OpMercenaryDismiss = 322,
    [pbr::OriginalName("OP_MercenaryHire")] OpMercenaryHire = 323,
    [pbr::OriginalName("OP_MercenarySuspendRequest")] OpMercenarySuspendRequest = 324,
    [pbr::OriginalName("OP_MercenarySuspendResponse")] OpMercenarySuspendResponse = 325,
    [pbr::OriginalName("OP_MercenaryTimer")] OpMercenaryTimer = 326,
    [pbr::OriginalName("OP_MercenaryTimerRequest")] OpMercenaryTimerRequest = 327,
    [pbr::OriginalName("OP_MercenaryUnknown1")] OpMercenaryUnknown1 = 328,
    [pbr::OriginalName("OP_MercenaryUnsuspendResponse")] OpMercenaryUnsuspendResponse = 329,
    [pbr::OriginalName("OP_MobEnduranceUpdate")] OpMobEnduranceUpdate = 330,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_MobHealth")] OpMobHealth = 331,
    [pbr::OriginalName("OP_MobManaUpdate")] OpMobManaUpdate = 332,
    [pbr::OriginalName("OP_MobRename")] OpMobRename = 333,
    /// <summary>
    /// not used anymore, here for lecacy reasons eqextractor
    /// </summary>
    [pbr::OriginalName("OP_MobUpdate")] OpMobUpdate = 334,
    [pbr::OriginalName("OP_MoneyOnCorpse")] OpMoneyOnCorpse = 335,
    [pbr::OriginalName("OP_MoneyUpdate")] OpMoneyUpdate = 336,
    [pbr::OriginalName("OP_MOTD")] OpMotd = 337,
    [pbr::OriginalName("OP_MoveCoin")] OpMoveCoin = 338,
    [pbr::OriginalName("OP_MoveDoor")] OpMoveDoor = 339,
    [pbr::OriginalName("OP_MoveItem")] OpMoveItem = 340,
    [pbr::OriginalName("OP_MoveLogDisregard")] OpMoveLogDisregard = 341,
    [pbr::OriginalName("OP_MoveLogRequest")] OpMoveLogRequest = 342,
    [pbr::OriginalName("OP_MultiLineMsg")] OpMultiLineMsg = 343,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_NewSpawn")] OpNewSpawn = 344,
    [pbr::OriginalName("OP_NewTitlesAvailable")] OpNewTitlesAvailable = 345,
    [pbr::OriginalName("OP_NewZone")] OpNewZone = 346,
    [pbr::OriginalName("OP_OnLevelMessage")] OpOnLevelMessage = 347,
    [pbr::OriginalName("OP_OpenContainer")] OpOpenContainer = 348,
    [pbr::OriginalName("OP_OpenDiscordMerchant")] OpOpenDiscordMerchant = 349,
    [pbr::OriginalName("OP_OpenGuildTributeMaster")] OpOpenGuildTributeMaster = 350,
    [pbr::OriginalName("OP_OpenInventory")] OpOpenInventory = 351,
    [pbr::OriginalName("OP_OpenNewTasksWindow")] OpOpenNewTasksWindow = 352,
    [pbr::OriginalName("OP_OpenTributeMaster")] OpOpenTributeMaster = 353,
    [pbr::OriginalName("OP_PDeletePetition")] OpPdeletePetition = 354,
    [pbr::OriginalName("OP_PetBuffWindow")] OpPetBuffWindow = 355,
    [pbr::OriginalName("OP_PetCommands")] OpPetCommands = 356,
    [pbr::OriginalName("OP_PetCommandState")] OpPetCommandState = 357,
    [pbr::OriginalName("OP_PetHoTT")] OpPetHoTt = 358,
    [pbr::OriginalName("OP_Petition")] OpPetition = 359,
    [pbr::OriginalName("OP_PetitionBug")] OpPetitionBug = 360,
    [pbr::OriginalName("OP_PetitionCheckIn")] OpPetitionCheckIn = 361,
    [pbr::OriginalName("OP_PetitionCheckout")] OpPetitionCheckout = 362,
    [pbr::OriginalName("OP_PetitionCheckout2")] OpPetitionCheckout2 = 363,
    [pbr::OriginalName("OP_PetitionDelete")] OpPetitionDelete = 364,
    [pbr::OriginalName("OP_PetitionQue")] OpPetitionQue = 365,
    [pbr::OriginalName("OP_PetitionRefresh")] OpPetitionRefresh = 366,
    [pbr::OriginalName("OP_PetitionResolve")] OpPetitionResolve = 367,
    [pbr::OriginalName("OP_PetitionSearch")] OpPetitionSearch = 368,
    [pbr::OriginalName("OP_PetitionSearchResults")] OpPetitionSearchResults = 369,
    [pbr::OriginalName("OP_PetitionSearchText")] OpPetitionSearchText = 370,
    [pbr::OriginalName("OP_PetitionUnCheckout")] OpPetitionUnCheckout = 371,
    [pbr::OriginalName("OP_PetitionUpdate")] OpPetitionUpdate = 372,
    [pbr::OriginalName("OP_PickPocket")] OpPickPocket = 373,
    [pbr::OriginalName("OP_PlayerProfile")] OpPlayerProfile = 374,
    [pbr::OriginalName("OP_PlayerStateAdd")] OpPlayerStateAdd = 375,
    [pbr::OriginalName("OP_PlayerStateRemove")] OpPlayerStateRemove = 376,
    [pbr::OriginalName("OP_PlayEverquestRequest")] OpPlayEverquestRequest = 377,
    [pbr::OriginalName("OP_PlayEverquestResponse")] OpPlayEverquestResponse = 378,
    [pbr::OriginalName("OP_PlayMP3")] OpPlayMp3 = 379,
    [pbr::OriginalName("OP_Poll")] OpPoll = 380,
    [pbr::OriginalName("OP_PollResponse")] OpPollResponse = 381,
    [pbr::OriginalName("OP_PopupResponse")] OpPopupResponse = 382,
    /// <summary>
    ///this is really OP_WorldAccessGrant
    /// </summary>
    [pbr::OriginalName("OP_PostEnterWorld")] OpPostEnterWorld = 383,
    [pbr::OriginalName("OP_PotionBelt")] OpPotionBelt = 384,
    [pbr::OriginalName("OP_PreLogoutReply")] OpPreLogoutReply = 385,
    [pbr::OriginalName("OP_PurchaseLeadershipAA")] OpPurchaseLeadershipAa = 386,
    [pbr::OriginalName("OP_PVPLeaderBoardDetailsReply")] OpPvpleaderBoardDetailsReply = 387,
    [pbr::OriginalName("OP_PVPLeaderBoardDetailsRequest")] OpPvpleaderBoardDetailsRequest = 388,
    [pbr::OriginalName("OP_PVPLeaderBoardReply")] OpPvpleaderBoardReply = 389,
    [pbr::OriginalName("OP_PVPLeaderBoardRequest")] OpPvpleaderBoardRequest = 390,
    [pbr::OriginalName("OP_PVPStats")] OpPvpstats = 391,
    [pbr::OriginalName("OP_QueryResponseThing")] OpQueryResponseThing = 392,
    [pbr::OriginalName("OP_RaidInvite")] OpRaidInvite = 393,
    [pbr::OriginalName("OP_RaidJoin")] OpRaidJoin = 394,
    [pbr::OriginalName("OP_RaidUpdate")] OpRaidUpdate = 395,
    [pbr::OriginalName("OP_RandomNameGenerator")] OpRandomNameGenerator = 396,
    [pbr::OriginalName("OP_RandomReply")] OpRandomReply = 397,
    [pbr::OriginalName("OP_RandomReq")] OpRandomReq = 398,
    [pbr::OriginalName("OP_ReadBook")] OpReadBook = 399,
    [pbr::OriginalName("OP_RecipeAutoCombine")] OpRecipeAutoCombine = 400,
    [pbr::OriginalName("OP_RecipeDetails")] OpRecipeDetails = 401,
    [pbr::OriginalName("OP_RecipeReply")] OpRecipeReply = 402,
    [pbr::OriginalName("OP_RecipesFavorite")] OpRecipesFavorite = 403,
    [pbr::OriginalName("OP_RecipesSearch")] OpRecipesSearch = 404,
    [pbr::OriginalName("OP_ReclaimCrystals")] OpReclaimCrystals = 405,
    [pbr::OriginalName("OP_ReloadUI")] OpReloadUi = 406,
    [pbr::OriginalName("OP_RemoveAllDoors")] OpRemoveAllDoors = 407,
    [pbr::OriginalName("OP_RemoveBlockedBuffs")] OpRemoveBlockedBuffs = 408,
    [pbr::OriginalName("OP_RemoveNimbusEffect")] OpRemoveNimbusEffect = 409,
    [pbr::OriginalName("OP_RemoveTrap")] OpRemoveTrap = 410,
    [pbr::OriginalName("OP_Report")] OpReport = 411,
    [pbr::OriginalName("OP_ReqClientSpawn")] OpReqClientSpawn = 412,
    [pbr::OriginalName("OP_ReqNewZone")] OpReqNewZone = 413,
    [pbr::OriginalName("OP_RequestClientZoneChange")] OpRequestClientZoneChange = 414,
    [pbr::OriginalName("OP_RequestDuel")] OpRequestDuel = 415,
    [pbr::OriginalName("OP_RequestKnowledgeBase")] OpRequestKnowledgeBase = 416,
    [pbr::OriginalName("OP_RequestTitles")] OpRequestTitles = 417,
    [pbr::OriginalName("OP_RespawnWindow")] OpRespawnWindow = 418,
    [pbr::OriginalName("OP_RespondAA")] OpRespondAa = 419,
    [pbr::OriginalName("OP_RestState")] OpRestState = 420,
    [pbr::OriginalName("OP_Rewind")] OpRewind = 421,
    [pbr::OriginalName("OP_RezzAnswer")] OpRezzAnswer = 422,
    [pbr::OriginalName("OP_RezzComplete")] OpRezzComplete = 423,
    [pbr::OriginalName("OP_RezzRequest")] OpRezzRequest = 424,
    [pbr::OriginalName("OP_Sacrifice")] OpSacrifice = 425,
    [pbr::OriginalName("OP_SafeFallSuccess")] OpSafeFallSuccess = 426,
    [pbr::OriginalName("OP_SafePoint")] OpSafePoint = 427,
    [pbr::OriginalName("OP_Save")] OpSave = 428,
    [pbr::OriginalName("OP_SaveOnZoneReq")] OpSaveOnZoneReq = 429,
    [pbr::OriginalName("OP_SelectTribute")] OpSelectTribute = 430,
    [pbr::OriginalName("OP_SendAAStats")] OpSendAastats = 431,
    [pbr::OriginalName("OP_SendAATable")] OpSendAatable = 432,
    [pbr::OriginalName("OP_SendCharInfo")] OpSendCharInfo = 433,
    [pbr::OriginalName("OP_SendExpZonein")] OpSendExpZonein = 434,
    [pbr::OriginalName("OP_SendFindableNPCs")] OpSendFindableNpcs = 435,
    [pbr::OriginalName("OP_SendGuildTributes")] OpSendGuildTributes = 436,
    [pbr::OriginalName("OP_SendLoginInfo")] OpSendLoginInfo = 437,
    [pbr::OriginalName("OP_SendMaxCharacters")] OpSendMaxCharacters = 438,
    [pbr::OriginalName("OP_SendMembership")] OpSendMembership = 439,
    [pbr::OriginalName("OP_SendMembershipDetails")] OpSendMembershipDetails = 440,
    [pbr::OriginalName("OP_SendSystemStats")] OpSendSystemStats = 441,
    [pbr::OriginalName("OP_SendTitleList")] OpSendTitleList = 442,
    [pbr::OriginalName("OP_SendTributes")] OpSendTributes = 443,
    [pbr::OriginalName("OP_SendZonepoints")] OpSendZonepoints = 444,
    [pbr::OriginalName("OP_SenseHeading")] OpSenseHeading = 445,
    [pbr::OriginalName("OP_SenseTraps")] OpSenseTraps = 446,
    [pbr::OriginalName("OP_ServerListRequest")] OpServerListRequest = 447,
    [pbr::OriginalName("OP_ServerListResponse")] OpServerListResponse = 448,
    [pbr::OriginalName("OP_SessionReady")] OpSessionReady = 449,
    [pbr::OriginalName("OP_SetChatServer")] OpSetChatServer = 450,
    [pbr::OriginalName("OP_SetChatServer2")] OpSetChatServer2 = 451,
    [pbr::OriginalName("OP_SetGroupTarget")] OpSetGroupTarget = 452,
    [pbr::OriginalName("OP_SetGuildMOTD")] OpSetGuildMotd = 453,
    [pbr::OriginalName("OP_SetGuildRank")] OpSetGuildRank = 454,
    [pbr::OriginalName("OP_SetRunMode")] OpSetRunMode = 455,
    [pbr::OriginalName("OP_SetServerFilter")] OpSetServerFilter = 456,
    [pbr::OriginalName("OP_SetStartCity")] OpSetStartCity = 457,
    [pbr::OriginalName("OP_SetTitle")] OpSetTitle = 458,
    [pbr::OriginalName("OP_SetTitleReply")] OpSetTitleReply = 459,
    [pbr::OriginalName("OP_Shielding")] OpShielding = 460,
    [pbr::OriginalName("OP_ShopDelItem")] OpShopDelItem = 461,
    [pbr::OriginalName("OP_ShopEnd")] OpShopEnd = 462,
    [pbr::OriginalName("OP_ShopEndConfirm")] OpShopEndConfirm = 463,
    [pbr::OriginalName("OP_ShopItem")] OpShopItem = 464,
    [pbr::OriginalName("OP_ShopPlayerBuy")] OpShopPlayerBuy = 465,
    [pbr::OriginalName("OP_ShopPlayerSell")] OpShopPlayerSell = 466,
    [pbr::OriginalName("OP_ShopRequest")] OpShopRequest = 467,
    [pbr::OriginalName("OP_SimpleMessage")] OpSimpleMessage = 468,
    [pbr::OriginalName("OP_SkillUpdate")] OpSkillUpdate = 469,
    [pbr::OriginalName("OP_Sneak")] OpSneak = 470,
    [pbr::OriginalName("OP_Some3ByteHPUpdate")] OpSome3ByteHpupdate = 471,
    [pbr::OriginalName("OP_Some6ByteHPUpdate")] OpSome6ByteHpupdate = 472,
    [pbr::OriginalName("OP_SomeItemPacketMaybe")] OpSomeItemPacketMaybe = 473,
    [pbr::OriginalName("OP_Sound")] OpSound = 474,
    [pbr::OriginalName("OP_SpawnAppearance")] OpSpawnAppearance = 475,
    [pbr::OriginalName("OP_SpawnDoor")] OpSpawnDoor = 476,
    [pbr::OriginalName("OP_SpawnPositionUpdate")] OpSpawnPositionUpdate = 477,
    [pbr::OriginalName("OP_SpecialMesg")] OpSpecialMesg = 478,
    [pbr::OriginalName("OP_SpellEffect")] OpSpellEffect = 479,
    [pbr::OriginalName("OP_Split")] OpSplit = 480,
    [pbr::OriginalName("OP_Stamina")] OpStamina = 481,
    [pbr::OriginalName("OP_Stun")] OpStun = 482,
    [pbr::OriginalName("OP_Surname")] OpSurname = 483,
    [pbr::OriginalName("OP_SwapSpell")] OpSwapSpell = 484,
    [pbr::OriginalName("OP_TargetBuffs")] OpTargetBuffs = 485,
    [pbr::OriginalName("OP_TargetCommand")] OpTargetCommand = 486,
    [pbr::OriginalName("OP_TargetHoTT")] OpTargetHoTt = 487,
    [pbr::OriginalName("OP_TargetMouse")] OpTargetMouse = 488,
    [pbr::OriginalName("OP_TargetReject")] OpTargetReject = 489,
    [pbr::OriginalName("OP_TaskActivity")] OpTaskActivity = 490,
    [pbr::OriginalName("OP_TaskActivityComplete")] OpTaskActivityComplete = 491,
    [pbr::OriginalName("OP_TaskDescription")] OpTaskDescription = 492,
    [pbr::OriginalName("OP_TaskHistoryReply")] OpTaskHistoryReply = 493,
    [pbr::OriginalName("OP_TaskHistoryRequest")] OpTaskHistoryRequest = 494,
    [pbr::OriginalName("OP_TaskMemberList")] OpTaskMemberList = 495,
    [pbr::OriginalName("OP_Taunt")] OpTaunt = 496,
    [pbr::OriginalName("OP_TestBuff")] OpTestBuff = 497,
    [pbr::OriginalName("OP_TGB")] OpTgb = 498,
    [pbr::OriginalName("OP_TimeOfDay")] OpTimeOfDay = 499,
    [pbr::OriginalName("OP_Track")] OpTrack = 500,
    [pbr::OriginalName("OP_TrackTarget")] OpTrackTarget = 501,
    [pbr::OriginalName("OP_TrackUnknown")] OpTrackUnknown = 502,
    [pbr::OriginalName("OP_TradeAcceptClick")] OpTradeAcceptClick = 503,
    [pbr::OriginalName("OP_TradeBusy")] OpTradeBusy = 504,
    [pbr::OriginalName("OP_TradeCoins")] OpTradeCoins = 505,
    [pbr::OriginalName("OP_TradeMoneyUpdate")] OpTradeMoneyUpdate = 506,
    [pbr::OriginalName("OP_Trader")] OpTrader = 507,
    [pbr::OriginalName("OP_TraderBuy")] OpTraderBuy = 508,
    [pbr::OriginalName("OP_TraderDelItem")] OpTraderDelItem = 509,
    [pbr::OriginalName("OP_TradeRequest")] OpTradeRequest = 510,
    [pbr::OriginalName("OP_TradeRequestAck")] OpTradeRequestAck = 511,
    [pbr::OriginalName("OP_TraderItemUpdate")] OpTraderItemUpdate = 512,
    [pbr::OriginalName("OP_TraderShop")] OpTraderShop = 513,
    [pbr::OriginalName("OP_TradeSkillCombine")] OpTradeSkillCombine = 514,
    [pbr::OriginalName("OP_Translocate")] OpTranslocate = 515,
    [pbr::OriginalName("OP_TributeInfo")] OpTributeInfo = 516,
    [pbr::OriginalName("OP_TributeItem")] OpTributeItem = 517,
    [pbr::OriginalName("OP_TributeMoney")] OpTributeMoney = 518,
    [pbr::OriginalName("OP_TributeNPC")] OpTributeNpc = 519,
    [pbr::OriginalName("OP_TributePointUpdate")] OpTributePointUpdate = 520,
    [pbr::OriginalName("OP_TributeTimer")] OpTributeTimer = 521,
    [pbr::OriginalName("OP_TributeToggle")] OpTributeToggle = 522,
    [pbr::OriginalName("OP_TributeUpdate")] OpTributeUpdate = 523,
    [pbr::OriginalName("OP_Untargetable")] OpUntargetable = 524,
    [pbr::OriginalName("OP_UpdateAA")] OpUpdateAa = 525,
    [pbr::OriginalName("OP_UpdateAura")] OpUpdateAura = 526,
    [pbr::OriginalName("OP_UpdateLeadershipAA")] OpUpdateLeadershipAa = 527,
    [pbr::OriginalName("OP_VetClaimReply")] OpVetClaimReply = 528,
    [pbr::OriginalName("OP_VetClaimRequest")] OpVetClaimRequest = 529,
    [pbr::OriginalName("OP_VetRewardsAvaliable")] OpVetRewardsAvaliable = 530,
    [pbr::OriginalName("OP_VoiceMacroIn")] OpVoiceMacroIn = 531,
    [pbr::OriginalName("OP_VoiceMacroOut")] OpVoiceMacroOut = 532,
    [pbr::OriginalName("OP_WeaponEquip1")] OpWeaponEquip1 = 533,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_WearChange")] OpWearChange = 534,
    [pbr::OriginalName("OP_Weather")] OpWeather = 535,
    [pbr::OriginalName("OP_Weblink")] OpWeblink = 536,
    [pbr::OriginalName("OP_WhoAllRequest")] OpWhoAllRequest = 537,
    [pbr::OriginalName("OP_WhoAllResponse")] OpWhoAllResponse = 538,
    [pbr::OriginalName("OP_World_Client_CRC1")] OpWorldClientCrc1 = 539,
    [pbr::OriginalName("OP_World_Client_CRC2")] OpWorldClientCrc2 = 540,
    [pbr::OriginalName("OP_WorldClientReady")] OpWorldClientReady = 541,
    [pbr::OriginalName("OP_WorldComplete")] OpWorldComplete = 542,
    [pbr::OriginalName("OP_WorldLogout")] OpWorldLogout = 543,
    [pbr::OriginalName("OP_WorldObjectsSent")] OpWorldObjectsSent = 544,
    [pbr::OriginalName("OP_WorldUnknown001")] OpWorldUnknown001 = 545,
    [pbr::OriginalName("OP_XTargetAutoAddHaters")] OpXtargetAutoAddHaters = 546,
    [pbr::OriginalName("OP_XTargetOpen")] OpXtargetOpen = 547,
    [pbr::OriginalName("OP_XTargetOpenResponse")] OpXtargetOpenResponse = 548,
    [pbr::OriginalName("OP_XTargetRequest")] OpXtargetRequest = 549,
    [pbr::OriginalName("OP_XTargetResponse")] OpXtargetResponse = 550,
    [pbr::OriginalName("OP_YellForHelp")] OpYellForHelp = 551,
    [pbr::OriginalName("OP_ZoneChange")] OpZoneChange = 552,
    [pbr::OriginalName("OP_ZoneComplete")] OpZoneComplete = 553,
    /// <summary>
    ///supported
    /// </summary>
    [pbr::OriginalName("OP_ZoneEntry")] OpZoneEntry = 554,
    [pbr::OriginalName("OP_ZoneGuildList")] OpZoneGuildList = 555,
    [pbr::OriginalName("OP_ZoneInUnknown")] OpZoneInUnknown = 556,
    [pbr::OriginalName("OP_ZonePlayerToBind")] OpZonePlayerToBind = 557,
    [pbr::OriginalName("OP_ZoneServerInfo")] OpZoneServerInfo = 558,
    [pbr::OriginalName("OP_ZoneServerReady")] OpZoneServerReady = 559,
    [pbr::OriginalName("OP_ZoneSpawns")] OpZoneSpawns = 560,
    [pbr::OriginalName("OP_ZoneUnavail")] OpZoneUnavail = 561,
    [pbr::OriginalName("OP_ResetAA")] OpResetAa = 562,
    [pbr::OriginalName("OP_Buddy")] OpBuddy = 563,
    [pbr::OriginalName("OP_ChannelAnnounceJoin")] OpChannelAnnounceJoin = 564,
    [pbr::OriginalName("OP_ChannelAnnounceLeave")] OpChannelAnnounceLeave = 565,
    [pbr::OriginalName("OP_Ignore")] OpIgnore = 566,
    [pbr::OriginalName("OP_Mail")] OpMail = 567,
    [pbr::OriginalName("OP_MailboxChange")] OpMailboxChange = 568,
    [pbr::OriginalName("OP_MailDeliveryStatus")] OpMailDeliveryStatus = 569,
    [pbr::OriginalName("OP_MailHeader")] OpMailHeader = 570,
    [pbr::OriginalName("OP_MailHeaderCount")] OpMailHeaderCount = 571,
    [pbr::OriginalName("OP_MailLogin")] OpMailLogin = 572,
    [pbr::OriginalName("OP_MailNew")] OpMailNew = 573,
    [pbr::OriginalName("OP_MailSendBody")] OpMailSendBody = 574,
  }

  #endregion

  #region Messages
  public sealed partial class ChannelMessage : pb::IMessage<ChannelMessage> {
    private static readonly pb::MessageParser<ChannelMessage> _parser = new pb::MessageParser<ChannelMessage>(() => new ChannelMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage(ChannelMessage other) : this() {
      chanNum_ = other.chanNum_;
      language_ = other.language_;
      from_ = other.from_;
      to_ = other.to_;
      message_ = other.message_;
      guilddbid_ = other.guilddbid_;
      deliverto_ = other.deliverto_;
      type_ = other.type_;
      minstatus_ = other.minstatus_;
      fromadmin_ = other.fromadmin_;
      noreply_ = other.noreply_;
      isEmote_ = other.isEmote_;
      queued_ = other.queued_;
      zoneId_ = other.zoneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage Clone() {
      return new ChannelMessage(this);
    }

    /// <summary>Field number for the "chan_num" field.</summary>
    public const int ChanNumFieldNumber = 1;
    private int chanNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChanNum {
      get { return chanNum_; }
      set {
        chanNum_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private int language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 3;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guilddbid" field.</summary>
    public const int GuilddbidFieldNumber = 6;
    private int guilddbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guilddbid {
      get { return guilddbid_; }
      set {
        guilddbid_ = value;
      }
    }

    /// <summary>Field number for the "deliverto" field.</summary>
    public const int DelivertoFieldNumber = 7;
    private string deliverto_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverto {
      get { return deliverto_; }
      set {
        deliverto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "minstatus" field.</summary>
    public const int MinstatusFieldNumber = 9;
    private int minstatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minstatus {
      get { return minstatus_; }
      set {
        minstatus_ = value;
      }
    }

    /// <summary>Field number for the "fromadmin" field.</summary>
    public const int FromadminFieldNumber = 10;
    private int fromadmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fromadmin {
      get { return fromadmin_; }
      set {
        fromadmin_ = value;
      }
    }

    /// <summary>Field number for the "noreply" field.</summary>
    public const int NoreplyFieldNumber = 11;
    private bool noreply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Noreply {
      get { return noreply_; }
      set {
        noreply_ = value;
      }
    }

    /// <summary>Field number for the "is_emote" field.</summary>
    public const int IsEmoteFieldNumber = 12;
    private bool isEmote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEmote {
      get { return isEmote_; }
      set {
        isEmote_ = value;
      }
    }

    /// <summary>Field number for the "queued" field.</summary>
    public const int QueuedFieldNumber = 13;
    private int queued_;
    /// <summary>
    ///0 not queued, 1 queued, 2 queue full, 3 offline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Queued {
      get { return queued_; }
      set {
        queued_ = value;
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 14;
    private int zoneId_;
    /// <summary>
    ///You can specify a zone id if you want a message exclusively to one zone
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanNum != other.ChanNum) return false;
      if (Language != other.Language) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Message != other.Message) return false;
      if (Guilddbid != other.Guilddbid) return false;
      if (Deliverto != other.Deliverto) return false;
      if (Type != other.Type) return false;
      if (Minstatus != other.Minstatus) return false;
      if (Fromadmin != other.Fromadmin) return false;
      if (Noreply != other.Noreply) return false;
      if (IsEmote != other.IsEmote) return false;
      if (Queued != other.Queued) return false;
      if (ZoneId != other.ZoneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanNum != 0) hash ^= ChanNum.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Guilddbid != 0) hash ^= Guilddbid.GetHashCode();
      if (Deliverto.Length != 0) hash ^= Deliverto.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Minstatus != 0) hash ^= Minstatus.GetHashCode();
      if (Fromadmin != 0) hash ^= Fromadmin.GetHashCode();
      if (Noreply != false) hash ^= Noreply.GetHashCode();
      if (IsEmote != false) hash ^= IsEmote.GetHashCode();
      if (Queued != 0) hash ^= Queued.GetHashCode();
      if (ZoneId != 0) hash ^= ZoneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChanNum);
      }
      if (Language != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Language);
      }
      if (From.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(To);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (Guilddbid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Guilddbid);
      }
      if (Deliverto.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Deliverto);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (Minstatus != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Minstatus);
      }
      if (Fromadmin != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Fromadmin);
      }
      if (Noreply != false) {
        output.WriteRawTag(88);
        output.WriteBool(Noreply);
      }
      if (IsEmote != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsEmote);
      }
      if (Queued != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Queued);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ZoneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChanNum);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Guilddbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guilddbid);
      }
      if (Deliverto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverto);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Minstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minstatus);
      }
      if (Fromadmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fromadmin);
      }
      if (Noreply != false) {
        size += 1 + 1;
      }
      if (IsEmote != false) {
        size += 1 + 1;
      }
      if (Queued != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Queued);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessage other) {
      if (other == null) {
        return;
      }
      if (other.ChanNum != 0) {
        ChanNum = other.ChanNum;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Guilddbid != 0) {
        Guilddbid = other.Guilddbid;
      }
      if (other.Deliverto.Length != 0) {
        Deliverto = other.Deliverto;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Minstatus != 0) {
        Minstatus = other.Minstatus;
      }
      if (other.Fromadmin != 0) {
        Fromadmin = other.Fromadmin;
      }
      if (other.Noreply != false) {
        Noreply = other.Noreply;
      }
      if (other.IsEmote != false) {
        IsEmote = other.IsEmote;
      }
      if (other.Queued != 0) {
        Queued = other.Queued;
      }
      if (other.ZoneId != 0) {
        ZoneId = other.ZoneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanNum = input.ReadInt32();
            break;
          }
          case 16: {
            Language = input.ReadInt32();
            break;
          }
          case 26: {
            From = input.ReadString();
            break;
          }
          case 34: {
            To = input.ReadString();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
          case 48: {
            Guilddbid = input.ReadInt32();
            break;
          }
          case 58: {
            Deliverto = input.ReadString();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 72: {
            Minstatus = input.ReadInt32();
            break;
          }
          case 80: {
            Fromadmin = input.ReadInt32();
            break;
          }
          case 88: {
            Noreply = input.ReadBool();
            break;
          }
          case 96: {
            IsEmote = input.ReadBool();
            break;
          }
          case 104: {
            Queued = input.ReadInt32();
            break;
          }
          case 112: {
            ZoneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandMessage : pb::IMessage<CommandMessage> {
    private static readonly pb::MessageParser<CommandMessage> _parser = new pb::MessageParser<CommandMessage>(() => new CommandMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage(CommandMessage other) : this() {
      author_ = other.author_;
      command_ = other.command_;
      params_ = other.params_.Clone();
      result_ = other.result_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage Clone() {
      return new CommandMessage(this);
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 1;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_params_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> params_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 5;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Author != other.Author) return false;
      if (Command != other.Command) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Result != other.Result) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      hash ^= params_.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Author.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Author);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Command);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (Result.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Result);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandMessage other) {
      if (other == null) {
        return;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      params_.Add(other.params_);
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Author = input.ReadString();
            break;
          }
          case 18: {
            Command = input.ReadString();
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 34: {
            Result = input.ReadString();
            break;
          }
          case 42: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Daily Gain is a special system for tracking players progression in a daily snapshot.
  /// </summary>
  public sealed partial class DailyGain : pb::IMessage<DailyGain> {
    private static readonly pb::MessageParser<DailyGain> _parser = new pb::MessageParser<DailyGain>(() => new DailyGain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyGain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyGain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyGain(DailyGain other) : this() {
      accountId_ = other.accountId_;
      characterId_ = other.characterId_;
      levelsGained_ = other.levelsGained_;
      experienceGained_ = other.experienceGained_;
      moneyEarned_ = other.moneyEarned_;
      identity_ = other.identity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyGain Clone() {
      return new DailyGain(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "character_id" field.</summary>
    public const int CharacterIdFieldNumber = 2;
    private int characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    /// <summary>Field number for the "levels_gained" field.</summary>
    public const int LevelsGainedFieldNumber = 3;
    private int levelsGained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelsGained {
      get { return levelsGained_; }
      set {
        levelsGained_ = value;
      }
    }

    /// <summary>Field number for the "experience_gained" field.</summary>
    public const int ExperienceGainedFieldNumber = 4;
    private int experienceGained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExperienceGained {
      get { return experienceGained_; }
      set {
        experienceGained_ = value;
      }
    }

    /// <summary>Field number for the "money_earned" field.</summary>
    public const int MoneyEarnedFieldNumber = 5;
    private int moneyEarned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoneyEarned {
      get { return moneyEarned_; }
      set {
        moneyEarned_ = value;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 6;
    private string identity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyGain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyGain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (CharacterId != other.CharacterId) return false;
      if (LevelsGained != other.LevelsGained) return false;
      if (ExperienceGained != other.ExperienceGained) return false;
      if (MoneyEarned != other.MoneyEarned) return false;
      if (Identity != other.Identity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (CharacterId != 0) hash ^= CharacterId.GetHashCode();
      if (LevelsGained != 0) hash ^= LevelsGained.GetHashCode();
      if (ExperienceGained != 0) hash ^= ExperienceGained.GetHashCode();
      if (MoneyEarned != 0) hash ^= MoneyEarned.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (CharacterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CharacterId);
      }
      if (LevelsGained != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelsGained);
      }
      if (ExperienceGained != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExperienceGained);
      }
      if (MoneyEarned != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MoneyEarned);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      if (LevelsGained != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelsGained);
      }
      if (ExperienceGained != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExperienceGained);
      }
      if (MoneyEarned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoneyEarned);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyGain other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.CharacterId != 0) {
        CharacterId = other.CharacterId;
      }
      if (other.LevelsGained != 0) {
        LevelsGained = other.LevelsGained;
      }
      if (other.ExperienceGained != 0) {
        ExperienceGained = other.ExperienceGained;
      }
      if (other.MoneyEarned != 0) {
        MoneyEarned = other.MoneyEarned;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            CharacterId = input.ReadInt32();
            break;
          }
          case 24: {
            LevelsGained = input.ReadInt32();
            break;
          }
          case 32: {
            ExperienceGained = input.ReadInt32();
            break;
          }
          case 40: {
            MoneyEarned = input.ReadInt32();
            break;
          }
          case 50: {
            Identity = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Entity is full of entity data.
  /// </summary>
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      hp_ = other.hp_;
      level_ = other.level_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      race_ = other.race_;
      class_ = other.class_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Eqproto.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 7;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 8;
    private int class_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Class {
      get { return class_; }
      set {
        class_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Hp != other.Hp) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Race != other.Race) return false;
      if (Class != other.Class) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (Class != 0) hash ^= Class.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (Race != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Race);
      }
      if (Class != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Class);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (Class != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Eqproto.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.Class != 0) {
        Class = other.Class;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            if (position_ == null) {
              position_ = new global::Eqproto.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 56: {
            Race = input.ReadInt32();
            break;
          }
          case 64: {
            Class = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Entities : pb::IMessage<Entities> {
    private static readonly pb::MessageParser<Entities> _parser = new pb::MessageParser<Entities>(() => new Entities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities(Entities other) : this() {
      entities_ = other.entities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities Clone() {
      return new Entities(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int Entities_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Eqproto.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Eqproto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Eqproto.Entity> entities_ = new pbc::RepeatedField<global::Eqproto.Entity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Eqproto.Entity> Entities_ {
      get { return entities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entities other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      h_ = other.h_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 4;
    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(H, other.H)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (H != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(H);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (H != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(H);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (H != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.H != 0F) {
        H = other.H;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            H = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextureProfile : pb::IMessage<TextureProfile> {
    private static readonly pb::MessageParser<TextureProfile> _parser = new pb::MessageParser<TextureProfile>(() => new TextureProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextureProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureProfile(TextureProfile other) : this() {
      Head = other.head_ != null ? other.Head.Clone() : null;
      Chest = other.chest_ != null ? other.Chest.Clone() : null;
      Arms = other.arms_ != null ? other.Arms.Clone() : null;
      Wrist = other.wrist_ != null ? other.Wrist.Clone() : null;
      Hands = other.hands_ != null ? other.Hands.Clone() : null;
      Legs = other.legs_ != null ? other.Legs.Clone() : null;
      Feet = other.feet_ != null ? other.Feet.Clone() : null;
      Primary = other.primary_ != null ? other.Primary.Clone() : null;
      Secondary = other.secondary_ != null ? other.Secondary.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureProfile Clone() {
      return new TextureProfile(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Eqproto.Texture head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Chest" field.</summary>
    public const int ChestFieldNumber = 2;
    private global::Eqproto.Texture chest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Chest {
      get { return chest_; }
      set {
        chest_ = value;
      }
    }

    /// <summary>Field number for the "Arms" field.</summary>
    public const int ArmsFieldNumber = 3;
    private global::Eqproto.Texture arms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Arms {
      get { return arms_; }
      set {
        arms_ = value;
      }
    }

    /// <summary>Field number for the "Wrist" field.</summary>
    public const int WristFieldNumber = 4;
    private global::Eqproto.Texture wrist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Wrist {
      get { return wrist_; }
      set {
        wrist_ = value;
      }
    }

    /// <summary>Field number for the "Hands" field.</summary>
    public const int HandsFieldNumber = 5;
    private global::Eqproto.Texture hands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Hands {
      get { return hands_; }
      set {
        hands_ = value;
      }
    }

    /// <summary>Field number for the "Legs" field.</summary>
    public const int LegsFieldNumber = 6;
    private global::Eqproto.Texture legs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Legs {
      get { return legs_; }
      set {
        legs_ = value;
      }
    }

    /// <summary>Field number for the "Feet" field.</summary>
    public const int FeetFieldNumber = 7;
    private global::Eqproto.Texture feet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Feet {
      get { return feet_; }
      set {
        feet_ = value;
      }
    }

    /// <summary>Field number for the "Primary" field.</summary>
    public const int PrimaryFieldNumber = 8;
    private global::Eqproto.Texture primary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Primary {
      get { return primary_; }
      set {
        primary_ = value;
      }
    }

    /// <summary>Field number for the "Secondary" field.</summary>
    public const int SecondaryFieldNumber = 9;
    private global::Eqproto.Texture secondary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Texture Secondary {
      get { return secondary_; }
      set {
        secondary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextureProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextureProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (!object.Equals(Chest, other.Chest)) return false;
      if (!object.Equals(Arms, other.Arms)) return false;
      if (!object.Equals(Wrist, other.Wrist)) return false;
      if (!object.Equals(Hands, other.Hands)) return false;
      if (!object.Equals(Legs, other.Legs)) return false;
      if (!object.Equals(Feet, other.Feet)) return false;
      if (!object.Equals(Primary, other.Primary)) return false;
      if (!object.Equals(Secondary, other.Secondary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (chest_ != null) hash ^= Chest.GetHashCode();
      if (arms_ != null) hash ^= Arms.GetHashCode();
      if (wrist_ != null) hash ^= Wrist.GetHashCode();
      if (hands_ != null) hash ^= Hands.GetHashCode();
      if (legs_ != null) hash ^= Legs.GetHashCode();
      if (feet_ != null) hash ^= Feet.GetHashCode();
      if (primary_ != null) hash ^= Primary.GetHashCode();
      if (secondary_ != null) hash ^= Secondary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (chest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chest);
      }
      if (arms_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Arms);
      }
      if (wrist_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wrist);
      }
      if (hands_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hands);
      }
      if (legs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Legs);
      }
      if (feet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Feet);
      }
      if (primary_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Primary);
      }
      if (secondary_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Secondary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (chest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chest);
      }
      if (arms_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arms);
      }
      if (wrist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wrist);
      }
      if (hands_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hands);
      }
      if (legs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Legs);
      }
      if (feet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feet);
      }
      if (primary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Primary);
      }
      if (secondary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Secondary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextureProfile other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          head_ = new global::Eqproto.Texture();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.chest_ != null) {
        if (chest_ == null) {
          chest_ = new global::Eqproto.Texture();
        }
        Chest.MergeFrom(other.Chest);
      }
      if (other.arms_ != null) {
        if (arms_ == null) {
          arms_ = new global::Eqproto.Texture();
        }
        Arms.MergeFrom(other.Arms);
      }
      if (other.wrist_ != null) {
        if (wrist_ == null) {
          wrist_ = new global::Eqproto.Texture();
        }
        Wrist.MergeFrom(other.Wrist);
      }
      if (other.hands_ != null) {
        if (hands_ == null) {
          hands_ = new global::Eqproto.Texture();
        }
        Hands.MergeFrom(other.Hands);
      }
      if (other.legs_ != null) {
        if (legs_ == null) {
          legs_ = new global::Eqproto.Texture();
        }
        Legs.MergeFrom(other.Legs);
      }
      if (other.feet_ != null) {
        if (feet_ == null) {
          feet_ = new global::Eqproto.Texture();
        }
        Feet.MergeFrom(other.Feet);
      }
      if (other.primary_ != null) {
        if (primary_ == null) {
          primary_ = new global::Eqproto.Texture();
        }
        Primary.MergeFrom(other.Primary);
      }
      if (other.secondary_ != null) {
        if (secondary_ == null) {
          secondary_ = new global::Eqproto.Texture();
        }
        Secondary.MergeFrom(other.Secondary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              head_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(head_);
            break;
          }
          case 18: {
            if (chest_ == null) {
              chest_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(chest_);
            break;
          }
          case 26: {
            if (arms_ == null) {
              arms_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(arms_);
            break;
          }
          case 34: {
            if (wrist_ == null) {
              wrist_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(wrist_);
            break;
          }
          case 42: {
            if (hands_ == null) {
              hands_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(hands_);
            break;
          }
          case 50: {
            if (legs_ == null) {
              legs_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(legs_);
            break;
          }
          case 58: {
            if (feet_ == null) {
              feet_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(feet_);
            break;
          }
          case 66: {
            if (primary_ == null) {
              primary_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(primary_);
            break;
          }
          case 74: {
            if (secondary_ == null) {
              secondary_ = new global::Eqproto.Texture();
            }
            input.ReadMessage(secondary_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Texture : pb::IMessage<Texture> {
    private static readonly pb::MessageParser<Texture> _parser = new pb::MessageParser<Texture>(() => new Texture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Texture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture(Texture other) : this() {
      material_ = other.material_;
      unknown1_ = other.unknown1_;
      eliteModel_ = other.eliteModel_;
      herosForgeModel_ = other.herosForgeModel_;
      unknown2_ = other.unknown2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture Clone() {
      return new Texture(this);
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 1;
    private uint material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "unknown1" field.</summary>
    public const int Unknown1FieldNumber = 2;
    private uint unknown1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown1 {
      get { return unknown1_; }
      set {
        unknown1_ = value;
      }
    }

    /// <summary>Field number for the "EliteModel" field.</summary>
    public const int EliteModelFieldNumber = 3;
    private uint eliteModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EliteModel {
      get { return eliteModel_; }
      set {
        eliteModel_ = value;
      }
    }

    /// <summary>Field number for the "HerosForgeModel" field.</summary>
    public const int HerosForgeModelFieldNumber = 4;
    private uint herosForgeModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HerosForgeModel {
      get { return herosForgeModel_; }
      set {
        herosForgeModel_ = value;
      }
    }

    /// <summary>Field number for the "Unknown2" field.</summary>
    public const int Unknown2FieldNumber = 5;
    private uint unknown2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown2 {
      get { return unknown2_; }
      set {
        unknown2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Texture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Texture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Material != other.Material) return false;
      if (Unknown1 != other.Unknown1) return false;
      if (EliteModel != other.EliteModel) return false;
      if (HerosForgeModel != other.HerosForgeModel) return false;
      if (Unknown2 != other.Unknown2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
      if (EliteModel != 0) hash ^= EliteModel.GetHashCode();
      if (HerosForgeModel != 0) hash ^= HerosForgeModel.GetHashCode();
      if (Unknown2 != 0) hash ^= Unknown2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Material != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Material);
      }
      if (Unknown1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Unknown1);
      }
      if (EliteModel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EliteModel);
      }
      if (HerosForgeModel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HerosForgeModel);
      }
      if (Unknown2 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Unknown2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Material);
      }
      if (Unknown1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown1);
      }
      if (EliteModel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EliteModel);
      }
      if (HerosForgeModel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HerosForgeModel);
      }
      if (Unknown2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Texture other) {
      if (other == null) {
        return;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Unknown1 != 0) {
        Unknown1 = other.Unknown1;
      }
      if (other.EliteModel != 0) {
        EliteModel = other.EliteModel;
      }
      if (other.HerosForgeModel != 0) {
        HerosForgeModel = other.HerosForgeModel;
      }
      if (other.Unknown2 != 0) {
        Unknown2 = other.Unknown2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Material = input.ReadUInt32();
            break;
          }
          case 16: {
            Unknown1 = input.ReadUInt32();
            break;
          }
          case 24: {
            EliteModel = input.ReadUInt32();
            break;
          }
          case 32: {
            HerosForgeModel = input.ReadUInt32();
            break;
          }
          case 40: {
            Unknown2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TintProfile : pb::IMessage<TintProfile> {
    private static readonly pb::MessageParser<TintProfile> _parser = new pb::MessageParser<TintProfile>(() => new TintProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TintProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TintProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TintProfile(TintProfile other) : this() {
      Head = other.head_ != null ? other.Head.Clone() : null;
      Chest = other.chest_ != null ? other.Chest.Clone() : null;
      Arms = other.arms_ != null ? other.Arms.Clone() : null;
      Wrist = other.wrist_ != null ? other.Wrist.Clone() : null;
      Hands = other.hands_ != null ? other.Hands.Clone() : null;
      Legs = other.legs_ != null ? other.Legs.Clone() : null;
      Feet = other.feet_ != null ? other.Feet.Clone() : null;
      Primary = other.primary_ != null ? other.Primary.Clone() : null;
      Secondary = other.secondary_ != null ? other.Secondary.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TintProfile Clone() {
      return new TintProfile(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Eqproto.Tint head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Chest" field.</summary>
    public const int ChestFieldNumber = 2;
    private global::Eqproto.Tint chest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Chest {
      get { return chest_; }
      set {
        chest_ = value;
      }
    }

    /// <summary>Field number for the "Arms" field.</summary>
    public const int ArmsFieldNumber = 3;
    private global::Eqproto.Tint arms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Arms {
      get { return arms_; }
      set {
        arms_ = value;
      }
    }

    /// <summary>Field number for the "Wrist" field.</summary>
    public const int WristFieldNumber = 4;
    private global::Eqproto.Tint wrist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Wrist {
      get { return wrist_; }
      set {
        wrist_ = value;
      }
    }

    /// <summary>Field number for the "Hands" field.</summary>
    public const int HandsFieldNumber = 5;
    private global::Eqproto.Tint hands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Hands {
      get { return hands_; }
      set {
        hands_ = value;
      }
    }

    /// <summary>Field number for the "Legs" field.</summary>
    public const int LegsFieldNumber = 6;
    private global::Eqproto.Tint legs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Legs {
      get { return legs_; }
      set {
        legs_ = value;
      }
    }

    /// <summary>Field number for the "Feet" field.</summary>
    public const int FeetFieldNumber = 7;
    private global::Eqproto.Tint feet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Feet {
      get { return feet_; }
      set {
        feet_ = value;
      }
    }

    /// <summary>Field number for the "Primary" field.</summary>
    public const int PrimaryFieldNumber = 8;
    private global::Eqproto.Tint primary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Primary {
      get { return primary_; }
      set {
        primary_ = value;
      }
    }

    /// <summary>Field number for the "Secondary" field.</summary>
    public const int SecondaryFieldNumber = 9;
    private global::Eqproto.Tint secondary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Secondary {
      get { return secondary_; }
      set {
        secondary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TintProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TintProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (!object.Equals(Chest, other.Chest)) return false;
      if (!object.Equals(Arms, other.Arms)) return false;
      if (!object.Equals(Wrist, other.Wrist)) return false;
      if (!object.Equals(Hands, other.Hands)) return false;
      if (!object.Equals(Legs, other.Legs)) return false;
      if (!object.Equals(Feet, other.Feet)) return false;
      if (!object.Equals(Primary, other.Primary)) return false;
      if (!object.Equals(Secondary, other.Secondary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (chest_ != null) hash ^= Chest.GetHashCode();
      if (arms_ != null) hash ^= Arms.GetHashCode();
      if (wrist_ != null) hash ^= Wrist.GetHashCode();
      if (hands_ != null) hash ^= Hands.GetHashCode();
      if (legs_ != null) hash ^= Legs.GetHashCode();
      if (feet_ != null) hash ^= Feet.GetHashCode();
      if (primary_ != null) hash ^= Primary.GetHashCode();
      if (secondary_ != null) hash ^= Secondary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (chest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chest);
      }
      if (arms_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Arms);
      }
      if (wrist_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wrist);
      }
      if (hands_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hands);
      }
      if (legs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Legs);
      }
      if (feet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Feet);
      }
      if (primary_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Primary);
      }
      if (secondary_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Secondary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (chest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chest);
      }
      if (arms_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arms);
      }
      if (wrist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wrist);
      }
      if (hands_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hands);
      }
      if (legs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Legs);
      }
      if (feet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feet);
      }
      if (primary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Primary);
      }
      if (secondary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Secondary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TintProfile other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          head_ = new global::Eqproto.Tint();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.chest_ != null) {
        if (chest_ == null) {
          chest_ = new global::Eqproto.Tint();
        }
        Chest.MergeFrom(other.Chest);
      }
      if (other.arms_ != null) {
        if (arms_ == null) {
          arms_ = new global::Eqproto.Tint();
        }
        Arms.MergeFrom(other.Arms);
      }
      if (other.wrist_ != null) {
        if (wrist_ == null) {
          wrist_ = new global::Eqproto.Tint();
        }
        Wrist.MergeFrom(other.Wrist);
      }
      if (other.hands_ != null) {
        if (hands_ == null) {
          hands_ = new global::Eqproto.Tint();
        }
        Hands.MergeFrom(other.Hands);
      }
      if (other.legs_ != null) {
        if (legs_ == null) {
          legs_ = new global::Eqproto.Tint();
        }
        Legs.MergeFrom(other.Legs);
      }
      if (other.feet_ != null) {
        if (feet_ == null) {
          feet_ = new global::Eqproto.Tint();
        }
        Feet.MergeFrom(other.Feet);
      }
      if (other.primary_ != null) {
        if (primary_ == null) {
          primary_ = new global::Eqproto.Tint();
        }
        Primary.MergeFrom(other.Primary);
      }
      if (other.secondary_ != null) {
        if (secondary_ == null) {
          secondary_ = new global::Eqproto.Tint();
        }
        Secondary.MergeFrom(other.Secondary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              head_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(head_);
            break;
          }
          case 18: {
            if (chest_ == null) {
              chest_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(chest_);
            break;
          }
          case 26: {
            if (arms_ == null) {
              arms_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(arms_);
            break;
          }
          case 34: {
            if (wrist_ == null) {
              wrist_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(wrist_);
            break;
          }
          case 42: {
            if (hands_ == null) {
              hands_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(hands_);
            break;
          }
          case 50: {
            if (legs_ == null) {
              legs_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(legs_);
            break;
          }
          case 58: {
            if (feet_ == null) {
              feet_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(feet_);
            break;
          }
          case 66: {
            if (primary_ == null) {
              primary_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(primary_);
            break;
          }
          case 74: {
            if (secondary_ == null) {
              secondary_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(secondary_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tint : pb::IMessage<Tint> {
    private static readonly pb::MessageParser<Tint> _parser = new pb::MessageParser<Tint>(() => new Tint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tint(Tint other) : this() {
      blue_ = other.blue_;
      green_ = other.green_;
      red_ = other.red_;
      useTint_ = other.useTint_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tint Clone() {
      return new Tint(this);
    }

    /// <summary>Field number for the "Blue" field.</summary>
    public const int BlueFieldNumber = 1;
    private uint blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "Green" field.</summary>
    public const int GreenFieldNumber = 2;
    private uint green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "Red" field.</summary>
    public const int RedFieldNumber = 3;
    private uint red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "UseTint" field.</summary>
    public const int UseTintFieldNumber = 4;
    private uint useTint_;
    /// <summary>
    /// if there's a tint, this is FF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseTint {
      get { return useTint_; }
      set {
        useTint_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 5;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Blue != other.Blue) return false;
      if (Green != other.Green) return false;
      if (Red != other.Red) return false;
      if (UseTint != other.UseTint) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Blue != 0) hash ^= Blue.GetHashCode();
      if (Green != 0) hash ^= Green.GetHashCode();
      if (Red != 0) hash ^= Red.GetHashCode();
      if (UseTint != 0) hash ^= UseTint.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Blue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Blue);
      }
      if (Green != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Green);
      }
      if (Red != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Red);
      }
      if (UseTint != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UseTint);
      }
      if (Color != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blue);
      }
      if (Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Green);
      }
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Red);
      }
      if (UseTint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseTint);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tint other) {
      if (other == null) {
        return;
      }
      if (other.Blue != 0) {
        Blue = other.Blue;
      }
      if (other.Green != 0) {
        Green = other.Green;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.UseTint != 0) {
        UseTint = other.UseTint;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Blue = input.ReadUInt32();
            break;
          }
          case 16: {
            Green = input.ReadUInt32();
            break;
          }
          case 24: {
            Red = input.ReadUInt32();
            break;
          }
          case 32: {
            UseTint = input.ReadUInt32();
            break;
          }
          case 40: {
            Color = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      op_ = other.op_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Eqproto.OpCode op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.OpCode Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            op_ = (global::Eqproto.OpCode) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_Death
  /// </summary>
  public sealed partial class DeathEvent : pb::IMessage<DeathEvent> {
    private static readonly pb::MessageParser<DeathEvent> _parser = new pb::MessageParser<DeathEvent>(() => new DeathEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeathEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeathEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeathEvent(DeathEvent other) : this() {
      spawnId_ = other.spawnId_;
      killerId_ = other.killerId_;
      corpseId_ = other.corpseId_;
      bindZoneId_ = other.bindZoneId_;
      spellId_ = other.spellId_;
      attackSkillId_ = other.attackSkillId_;
      damage_ = other.damage_;
      unknown028_ = other.unknown028_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeathEvent Clone() {
      return new DeathEvent(this);
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 1;
    private uint spawnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "killer_id" field.</summary>
    public const int KillerIdFieldNumber = 2;
    private uint killerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillerId {
      get { return killerId_; }
      set {
        killerId_ = value;
      }
    }

    /// <summary>Field number for the "corpse_id" field.</summary>
    public const int CorpseIdFieldNumber = 3;
    private uint corpseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CorpseId {
      get { return corpseId_; }
      set {
        corpseId_ = value;
      }
    }

    /// <summary>Field number for the "bind_zone_id" field.</summary>
    public const int BindZoneIdFieldNumber = 4;
    private uint bindZoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BindZoneId {
      get { return bindZoneId_; }
      set {
        bindZoneId_ = value;
      }
    }

    /// <summary>Field number for the "spell_id" field.</summary>
    public const int SpellIdFieldNumber = 5;
    private uint spellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpellId {
      get { return spellId_; }
      set {
        spellId_ = value;
      }
    }

    /// <summary>Field number for the "attack_skill_id" field.</summary>
    public const int AttackSkillIdFieldNumber = 6;
    private uint attackSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackSkillId {
      get { return attackSkillId_; }
      set {
        attackSkillId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 7;
    private uint damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "unknown028" field.</summary>
    public const int Unknown028FieldNumber = 8;
    private uint unknown028_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown028 {
      get { return unknown028_; }
      set {
        unknown028_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeathEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeathEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnId != other.SpawnId) return false;
      if (KillerId != other.KillerId) return false;
      if (CorpseId != other.CorpseId) return false;
      if (BindZoneId != other.BindZoneId) return false;
      if (SpellId != other.SpellId) return false;
      if (AttackSkillId != other.AttackSkillId) return false;
      if (Damage != other.Damage) return false;
      if (Unknown028 != other.Unknown028) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (KillerId != 0) hash ^= KillerId.GetHashCode();
      if (CorpseId != 0) hash ^= CorpseId.GetHashCode();
      if (BindZoneId != 0) hash ^= BindZoneId.GetHashCode();
      if (SpellId != 0) hash ^= SpellId.GetHashCode();
      if (AttackSkillId != 0) hash ^= AttackSkillId.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Unknown028 != 0) hash ^= Unknown028.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpawnId);
      }
      if (KillerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KillerId);
      }
      if (CorpseId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CorpseId);
      }
      if (BindZoneId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BindZoneId);
      }
      if (SpellId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpellId);
      }
      if (AttackSkillId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AttackSkillId);
      }
      if (Damage != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Damage);
      }
      if (Unknown028 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Unknown028);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (KillerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillerId);
      }
      if (CorpseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CorpseId);
      }
      if (BindZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BindZoneId);
      }
      if (SpellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpellId);
      }
      if (AttackSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackSkillId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      if (Unknown028 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown028);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeathEvent other) {
      if (other == null) {
        return;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.KillerId != 0) {
        KillerId = other.KillerId;
      }
      if (other.CorpseId != 0) {
        CorpseId = other.CorpseId;
      }
      if (other.BindZoneId != 0) {
        BindZoneId = other.BindZoneId;
      }
      if (other.SpellId != 0) {
        SpellId = other.SpellId;
      }
      if (other.AttackSkillId != 0) {
        AttackSkillId = other.AttackSkillId;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Unknown028 != 0) {
        Unknown028 = other.Unknown028;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 16: {
            KillerId = input.ReadUInt32();
            break;
          }
          case 24: {
            CorpseId = input.ReadUInt32();
            break;
          }
          case 32: {
            BindZoneId = input.ReadUInt32();
            break;
          }
          case 40: {
            SpellId = input.ReadUInt32();
            break;
          }
          case 48: {
            AttackSkillId = input.ReadUInt32();
            break;
          }
          case 56: {
            Damage = input.ReadUInt32();
            break;
          }
          case 64: {
            Unknown028 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_Damage
  /// </summary>
  public sealed partial class DamageEvent : pb::IMessage<DamageEvent> {
    private static readonly pb::MessageParser<DamageEvent> _parser = new pb::MessageParser<DamageEvent>(() => new DamageEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEvent(DamageEvent other) : this() {
      target_ = other.target_;
      source_ = other.source_;
      type_ = other.type_;
      spellid_ = other.spellid_;
      damage_ = other.damage_;
      force_ = other.force_;
      meleepushXy_ = other.meleepushXy_;
      meleepushZ_ = other.meleepushZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEvent Clone() {
      return new DamageEvent(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private uint target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private uint source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///slashing, etc. 231 (0xE7) for spells
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spellid" field.</summary>
    public const int SpellidFieldNumber = 4;
    private uint spellid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spellid {
      get { return spellid_; }
      set {
        spellid_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private uint damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 6;
    private float force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "meleepush_xy" field.</summary>
    public const int MeleepushXyFieldNumber = 7;
    private float meleepushXy_;
    /// <summary>
    /// see above notes in Action_Struct
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleepushXy {
      get { return meleepushXy_; }
      set {
        meleepushXy_ = value;
      }
    }

    /// <summary>Field number for the "meleepush_z" field.</summary>
    public const int MeleepushZFieldNumber = 8;
    private float meleepushZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleepushZ {
      get { return meleepushZ_; }
      set {
        meleepushZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Source != other.Source) return false;
      if (Type != other.Type) return false;
      if (Spellid != other.Spellid) return false;
      if (Damage != other.Damage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Force, other.Force)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleepushXy, other.MeleepushXy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleepushZ, other.MeleepushZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Target != 0) hash ^= Target.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Spellid != 0) hash ^= Spellid.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Force != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Force);
      if (MeleepushXy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleepushXy);
      if (MeleepushZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleepushZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Target != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Target);
      }
      if (Source != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Source);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (Spellid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Spellid);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Damage);
      }
      if (Force != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Force);
      }
      if (MeleepushXy != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MeleepushXy);
      }
      if (MeleepushZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MeleepushZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Target);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Source);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Spellid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spellid);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      if (Force != 0F) {
        size += 1 + 4;
      }
      if (MeleepushXy != 0F) {
        size += 1 + 4;
      }
      if (MeleepushZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageEvent other) {
      if (other == null) {
        return;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Spellid != 0) {
        Spellid = other.Spellid;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Force != 0F) {
        Force = other.Force;
      }
      if (other.MeleepushXy != 0F) {
        MeleepushXy = other.MeleepushXy;
      }
      if (other.MeleepushZ != 0F) {
        MeleepushZ = other.MeleepushZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Target = input.ReadUInt32();
            break;
          }
          case 16: {
            Source = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 32: {
            Spellid = input.ReadUInt32();
            break;
          }
          case 40: {
            Damage = input.ReadUInt32();
            break;
          }
          case 53: {
            Force = input.ReadFloat();
            break;
          }
          case 61: {
            MeleepushXy = input.ReadFloat();
            break;
          }
          case 69: {
            MeleepushZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_Assist OP_Camp
  /// </summary>
  public sealed partial class EntityEvent : pb::IMessage<EntityEvent> {
    private static readonly pb::MessageParser<EntityEvent> _parser = new pb::MessageParser<EntityEvent>(() => new EntityEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent(EntityEvent other) : this() {
      entityId_ = other.entityId_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent Clone() {
      return new EntityEvent(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    /// <summary>
    ///source of event trigger. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private uint targetId_;
    /// <summary>
    ///target or other/source/target entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityEvent other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_ChannelMessage
  /// </summary>
  public sealed partial class ChannelMessageEvent : pb::IMessage<ChannelMessageEvent> {
    private static readonly pb::MessageParser<ChannelMessageEvent> _parser = new pb::MessageParser<ChannelMessageEvent>(() => new ChannelMessageEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageEvent(ChannelMessageEvent other) : this() {
      targetName_ = other.targetName_;
      sender_ = other.sender_;
      language_ = other.language_;
      chanNum_ = other.chanNum_;
      cmUnknown4_ = other.cmUnknown4_;
      skillInLanguage_ = other.skillInLanguage_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageEvent Clone() {
      return new ChannelMessageEvent(this);
    }

    /// <summary>Field number for the "target_name" field.</summary>
    public const int TargetNameFieldNumber = 1;
    private string targetName_ = "";
    /// <summary>
    /// Tell recipient
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private string sender_ = "";
    /// <summary>
    /// The senders name (len might be wrong)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private uint language_;
    /// <summary>
    /// Language
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "chan_num" field.</summary>
    public const int ChanNumFieldNumber = 4;
    private uint chanNum_;
    /// <summary>
    /// Channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChanNum {
      get { return chanNum_; }
      set {
        chanNum_ = value;
      }
    }

    /// <summary>Field number for the "cm_unknown4" field.</summary>
    public const int CmUnknown4FieldNumber = 5;
    private uint cmUnknown4_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CmUnknown4 {
      get { return cmUnknown4_; }
      set {
        cmUnknown4_ = value;
      }
    }

    /// <summary>Field number for the "skill_in_language" field.</summary>
    public const int SkillInLanguageFieldNumber = 6;
    private uint skillInLanguage_;
    /// <summary>
    /// The players skill in this language? might be wrong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillInLanguage {
      get { return skillInLanguage_; }
      set {
        skillInLanguage_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private string message_ = "";
    /// <summary>
    /// Variable length message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetName != other.TargetName) return false;
      if (Sender != other.Sender) return false;
      if (Language != other.Language) return false;
      if (ChanNum != other.ChanNum) return false;
      if (CmUnknown4 != other.CmUnknown4) return false;
      if (SkillInLanguage != other.SkillInLanguage) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetName.Length != 0) hash ^= TargetName.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (ChanNum != 0) hash ^= ChanNum.GetHashCode();
      if (CmUnknown4 != 0) hash ^= CmUnknown4.GetHashCode();
      if (SkillInLanguage != 0) hash ^= SkillInLanguage.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetName);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sender);
      }
      if (Language != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Language);
      }
      if (ChanNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChanNum);
      }
      if (CmUnknown4 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CmUnknown4);
      }
      if (SkillInLanguage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SkillInLanguage);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (ChanNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChanNum);
      }
      if (CmUnknown4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CmUnknown4);
      }
      if (SkillInLanguage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillInLanguage);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageEvent other) {
      if (other == null) {
        return;
      }
      if (other.TargetName.Length != 0) {
        TargetName = other.TargetName;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.ChanNum != 0) {
        ChanNum = other.ChanNum;
      }
      if (other.CmUnknown4 != 0) {
        CmUnknown4 = other.CmUnknown4;
      }
      if (other.SkillInLanguage != 0) {
        SkillInLanguage = other.SkillInLanguage;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetName = input.ReadString();
            break;
          }
          case 18: {
            Sender = input.ReadString();
            break;
          }
          case 24: {
            Language = input.ReadUInt32();
            break;
          }
          case 32: {
            ChanNum = input.ReadUInt32();
            break;
          }
          case 40: {
            CmUnknown4 = input.ReadUInt32();
            break;
          }
          case 48: {
            SkillInLanguage = input.ReadUInt32();
            break;
          }
          case 58: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_WearChange
  /// </summary>
  public sealed partial class WearChangeEvent : pb::IMessage<WearChangeEvent> {
    private static readonly pb::MessageParser<WearChangeEvent> _parser = new pb::MessageParser<WearChangeEvent>(() => new WearChangeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WearChangeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearChangeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearChangeEvent(WearChangeEvent other) : this() {
      spawnId_ = other.spawnId_;
      material_ = other.material_;
      unknown06_ = other.unknown06_;
      eliteMaterial_ = other.eliteMaterial_;
      heroForgeModel_ = other.heroForgeModel_;
      unknown18_ = other.unknown18_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      wearSlotId_ = other.wearSlotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearChangeEvent Clone() {
      return new WearChangeEvent(this);
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 1;
    private uint spawnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private uint material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "unknown06" field.</summary>
    public const int Unknown06FieldNumber = 3;
    private uint unknown06_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown06 {
      get { return unknown06_; }
      set {
        unknown06_ = value;
      }
    }

    /// <summary>Field number for the "elite_material" field.</summary>
    public const int EliteMaterialFieldNumber = 4;
    private uint eliteMaterial_;
    /// <summary>
    /// 1 for Drakkin Elite Material
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EliteMaterial {
      get { return eliteMaterial_; }
      set {
        eliteMaterial_ = value;
      }
    }

    /// <summary>Field number for the "hero_forge_model" field.</summary>
    public const int HeroForgeModelFieldNumber = 5;
    private uint heroForgeModel_;
    /// <summary>
    /// New to VoA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroForgeModel {
      get { return heroForgeModel_; }
      set {
        heroForgeModel_ = value;
      }
    }

    /// <summary>Field number for the "unknown18" field.</summary>
    public const int Unknown18FieldNumber = 6;
    private uint unknown18_;
    /// <summary>
    /// New to RoF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown18 {
      get { return unknown18_; }
      set {
        unknown18_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    private global::Eqproto.Tint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.Tint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "wear_slot_id" field.</summary>
    public const int WearSlotIdFieldNumber = 8;
    private uint wearSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WearSlotId {
      get { return wearSlotId_; }
      set {
        wearSlotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WearChangeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WearChangeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnId != other.SpawnId) return false;
      if (Material != other.Material) return false;
      if (Unknown06 != other.Unknown06) return false;
      if (EliteMaterial != other.EliteMaterial) return false;
      if (HeroForgeModel != other.HeroForgeModel) return false;
      if (Unknown18 != other.Unknown18) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (WearSlotId != other.WearSlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Unknown06 != 0) hash ^= Unknown06.GetHashCode();
      if (EliteMaterial != 0) hash ^= EliteMaterial.GetHashCode();
      if (HeroForgeModel != 0) hash ^= HeroForgeModel.GetHashCode();
      if (Unknown18 != 0) hash ^= Unknown18.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (WearSlotId != 0) hash ^= WearSlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpawnId);
      }
      if (Material != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Material);
      }
      if (Unknown06 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Unknown06);
      }
      if (EliteMaterial != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EliteMaterial);
      }
      if (HeroForgeModel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroForgeModel);
      }
      if (Unknown18 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Unknown18);
      }
      if (color_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Color);
      }
      if (WearSlotId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(WearSlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Material);
      }
      if (Unknown06 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown06);
      }
      if (EliteMaterial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EliteMaterial);
      }
      if (HeroForgeModel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroForgeModel);
      }
      if (Unknown18 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown18);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (WearSlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WearSlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WearChangeEvent other) {
      if (other == null) {
        return;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Unknown06 != 0) {
        Unknown06 = other.Unknown06;
      }
      if (other.EliteMaterial != 0) {
        EliteMaterial = other.EliteMaterial;
      }
      if (other.HeroForgeModel != 0) {
        HeroForgeModel = other.HeroForgeModel;
      }
      if (other.Unknown18 != 0) {
        Unknown18 = other.Unknown18;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Eqproto.Tint();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.WearSlotId != 0) {
        WearSlotId = other.WearSlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 16: {
            Material = input.ReadUInt32();
            break;
          }
          case 24: {
            Unknown06 = input.ReadUInt32();
            break;
          }
          case 32: {
            EliteMaterial = input.ReadUInt32();
            break;
          }
          case 40: {
            HeroForgeModel = input.ReadUInt32();
            break;
          }
          case 48: {
            Unknown18 = input.ReadUInt32();
            break;
          }
          case 58: {
            if (color_ == null) {
              color_ = new global::Eqproto.Tint();
            }
            input.ReadMessage(color_);
            break;
          }
          case 64: {
            WearSlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_DeleteSpawn
  /// </summary>
  public sealed partial class DeleteSpawnEvent : pb::IMessage<DeleteSpawnEvent> {
    private static readonly pb::MessageParser<DeleteSpawnEvent> _parser = new pb::MessageParser<DeleteSpawnEvent>(() => new DeleteSpawnEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteSpawnEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSpawnEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSpawnEvent(DeleteSpawnEvent other) : this() {
      spawnId_ = other.spawnId_;
      decay_ = other.decay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSpawnEvent Clone() {
      return new DeleteSpawnEvent(this);
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 1;
    private uint spawnId_;
    /// <summary>
    /// Spawn ID to delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "decay" field.</summary>
    public const int DecayFieldNumber = 2;
    private uint decay_;
    /// <summary>
    /// 0 = vanish immediately, 1 = 'Decay' sparklies for corpses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decay {
      get { return decay_; }
      set {
        decay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteSpawnEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteSpawnEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnId != other.SpawnId) return false;
      if (Decay != other.Decay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (Decay != 0) hash ^= Decay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpawnId);
      }
      if (Decay != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Decay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (Decay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteSpawnEvent other) {
      if (other == null) {
        return;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.Decay != 0) {
        Decay = other.Decay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 16: {
            Decay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_MobHealth, OP_HPUpdate
  /// </summary>
  public sealed partial class HPEvent : pb::IMessage<HPEvent> {
    private static readonly pb::MessageParser<HPEvent> _parser = new pb::MessageParser<HPEvent>(() => new HPEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HPEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPEvent(HPEvent other) : this() {
      spawnId_ = other.spawnId_;
      curHp_ = other.curHp_;
      maxHp_ = other.maxHp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HPEvent Clone() {
      return new HPEvent(this);
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 1;
    private uint spawnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 2;
    private uint curHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 3;
    private uint maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HPEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HPEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnId != other.SpawnId) return false;
      if (CurHp != other.CurHp) return false;
      if (MaxHp != other.MaxHp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (CurHp != 0) hash ^= CurHp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpawnId);
      }
      if (CurHp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurHp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurHp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HPEvent other) {
      if (other == null) {
        return;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.CurHp != 0) {
        CurHp = other.CurHp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurHp = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxHp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_ClientUpdate
  /// </summary>
  public sealed partial class PlayerPositionUpdateEvent : pb::IMessage<PlayerPositionUpdateEvent> {
    private static readonly pb::MessageParser<PlayerPositionUpdateEvent> _parser = new pb::MessageParser<PlayerPositionUpdateEvent>(() => new PlayerPositionUpdateEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPositionUpdateEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPositionUpdateEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPositionUpdateEvent(PlayerPositionUpdateEvent other) : this() {
      spawnId_ = other.spawnId_;
      deltaHeading_ = other.deltaHeading_;
      xPos_ = other.xPos_;
      padding0002_ = other.padding0002_;
      yPos_ = other.yPos_;
      animation_ = other.animation_;
      padding0006_ = other.padding0006_;
      zPos_ = other.zPos_;
      deltaY_ = other.deltaY_;
      deltaX_ = other.deltaX_;
      heading_ = other.heading_;
      padding0014_ = other.padding0014_;
      deltaZ_ = other.deltaZ_;
      padding0018_ = other.padding0018_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPositionUpdateEvent Clone() {
      return new PlayerPositionUpdateEvent(this);
    }

    /// <summary>Field number for the "spawn_id" field.</summary>
    public const int SpawnIdFieldNumber = 1;
    private uint spawnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "delta_heading" field.</summary>
    public const int DeltaHeadingFieldNumber = 2;
    private int deltaHeading_;
    /// <summary>
    /// change in heading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaHeading {
      get { return deltaHeading_; }
      set {
        deltaHeading_ = value;
      }
    }

    /// <summary>Field number for the "x_pos" field.</summary>
    public const int XPosFieldNumber = 3;
    private int xPos_;
    /// <summary>
    /// x coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    /// <summary>Field number for the "padding0002" field.</summary>
    public const int Padding0002FieldNumber = 4;
    private int padding0002_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0002 {
      get { return padding0002_; }
      set {
        padding0002_ = value;
      }
    }

    /// <summary>Field number for the "y_pos" field.</summary>
    public const int YPosFieldNumber = 5;
    private int yPos_;
    /// <summary>
    /// y coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 6;
    private int animation_;
    /// <summary>
    /// animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "padding0006" field.</summary>
    public const int Padding0006FieldNumber = 7;
    private int padding0006_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0006 {
      get { return padding0006_; }
      set {
        padding0006_ = value;
      }
    }

    /// <summary>Field number for the "z_pos" field.</summary>
    public const int ZPosFieldNumber = 8;
    private int zPos_;
    /// <summary>
    /// z coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZPos {
      get { return zPos_; }
      set {
        zPos_ = value;
      }
    }

    /// <summary>Field number for the "delta_y" field.</summary>
    public const int DeltaYFieldNumber = 9;
    private int deltaY_;
    /// <summary>
    /// change in y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaY {
      get { return deltaY_; }
      set {
        deltaY_ = value;
      }
    }

    /// <summary>Field number for the "delta_x" field.</summary>
    public const int DeltaXFieldNumber = 10;
    private int deltaX_;
    /// <summary>
    /// change in x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaX {
      get { return deltaX_; }
      set {
        deltaX_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 11;
    private int heading_;
    /// <summary>
    /// heading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "padding0014" field.</summary>
    public const int Padding0014FieldNumber = 12;
    private int padding0014_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0014 {
      get { return padding0014_; }
      set {
        padding0014_ = value;
      }
    }

    /// <summary>Field number for the "delta_z" field.</summary>
    public const int DeltaZFieldNumber = 13;
    private int deltaZ_;
    /// <summary>
    /// change in z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaZ {
      get { return deltaZ_; }
      set {
        deltaZ_ = value;
      }
    }

    /// <summary>Field number for the "padding0018" field.</summary>
    public const int Padding0018FieldNumber = 14;
    private int padding0018_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0018 {
      get { return padding0018_; }
      set {
        padding0018_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPositionUpdateEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPositionUpdateEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnId != other.SpawnId) return false;
      if (DeltaHeading != other.DeltaHeading) return false;
      if (XPos != other.XPos) return false;
      if (Padding0002 != other.Padding0002) return false;
      if (YPos != other.YPos) return false;
      if (Animation != other.Animation) return false;
      if (Padding0006 != other.Padding0006) return false;
      if (ZPos != other.ZPos) return false;
      if (DeltaY != other.DeltaY) return false;
      if (DeltaX != other.DeltaX) return false;
      if (Heading != other.Heading) return false;
      if (Padding0014 != other.Padding0014) return false;
      if (DeltaZ != other.DeltaZ) return false;
      if (Padding0018 != other.Padding0018) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (DeltaHeading != 0) hash ^= DeltaHeading.GetHashCode();
      if (XPos != 0) hash ^= XPos.GetHashCode();
      if (Padding0002 != 0) hash ^= Padding0002.GetHashCode();
      if (YPos != 0) hash ^= YPos.GetHashCode();
      if (Animation != 0) hash ^= Animation.GetHashCode();
      if (Padding0006 != 0) hash ^= Padding0006.GetHashCode();
      if (ZPos != 0) hash ^= ZPos.GetHashCode();
      if (DeltaY != 0) hash ^= DeltaY.GetHashCode();
      if (DeltaX != 0) hash ^= DeltaX.GetHashCode();
      if (Heading != 0) hash ^= Heading.GetHashCode();
      if (Padding0014 != 0) hash ^= Padding0014.GetHashCode();
      if (DeltaZ != 0) hash ^= DeltaZ.GetHashCode();
      if (Padding0018 != 0) hash ^= Padding0018.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpawnId);
      }
      if (DeltaHeading != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DeltaHeading);
      }
      if (XPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(XPos);
      }
      if (Padding0002 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Padding0002);
      }
      if (YPos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(YPos);
      }
      if (Animation != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Animation);
      }
      if (Padding0006 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Padding0006);
      }
      if (ZPos != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ZPos);
      }
      if (DeltaY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DeltaY);
      }
      if (DeltaX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DeltaX);
      }
      if (Heading != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Heading);
      }
      if (Padding0014 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Padding0014);
      }
      if (DeltaZ != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DeltaZ);
      }
      if (Padding0018 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Padding0018);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (DeltaHeading != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaHeading);
      }
      if (XPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XPos);
      }
      if (Padding0002 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Padding0002);
      }
      if (YPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YPos);
      }
      if (Animation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Animation);
      }
      if (Padding0006 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Padding0006);
      }
      if (ZPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZPos);
      }
      if (DeltaY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaY);
      }
      if (DeltaX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaX);
      }
      if (Heading != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heading);
      }
      if (Padding0014 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Padding0014);
      }
      if (DeltaZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaZ);
      }
      if (Padding0018 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Padding0018);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPositionUpdateEvent other) {
      if (other == null) {
        return;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.DeltaHeading != 0) {
        DeltaHeading = other.DeltaHeading;
      }
      if (other.XPos != 0) {
        XPos = other.XPos;
      }
      if (other.Padding0002 != 0) {
        Padding0002 = other.Padding0002;
      }
      if (other.YPos != 0) {
        YPos = other.YPos;
      }
      if (other.Animation != 0) {
        Animation = other.Animation;
      }
      if (other.Padding0006 != 0) {
        Padding0006 = other.Padding0006;
      }
      if (other.ZPos != 0) {
        ZPos = other.ZPos;
      }
      if (other.DeltaY != 0) {
        DeltaY = other.DeltaY;
      }
      if (other.DeltaX != 0) {
        DeltaX = other.DeltaX;
      }
      if (other.Heading != 0) {
        Heading = other.Heading;
      }
      if (other.Padding0014 != 0) {
        Padding0014 = other.Padding0014;
      }
      if (other.DeltaZ != 0) {
        DeltaZ = other.DeltaZ;
      }
      if (other.Padding0018 != 0) {
        Padding0018 = other.Padding0018;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 16: {
            DeltaHeading = input.ReadInt32();
            break;
          }
          case 24: {
            XPos = input.ReadInt32();
            break;
          }
          case 32: {
            Padding0002 = input.ReadInt32();
            break;
          }
          case 40: {
            YPos = input.ReadInt32();
            break;
          }
          case 48: {
            Animation = input.ReadInt32();
            break;
          }
          case 56: {
            Padding0006 = input.ReadInt32();
            break;
          }
          case 64: {
            ZPos = input.ReadInt32();
            break;
          }
          case 72: {
            DeltaY = input.ReadInt32();
            break;
          }
          case 80: {
            DeltaX = input.ReadInt32();
            break;
          }
          case 88: {
            Heading = input.ReadInt32();
            break;
          }
          case 96: {
            Padding0014 = input.ReadInt32();
            break;
          }
          case 104: {
            DeltaZ = input.ReadInt32();
            break;
          }
          case 112: {
            Padding0018 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_Animation
  /// </summary>
  public sealed partial class AnimationEvent : pb::IMessage<AnimationEvent> {
    private static readonly pb::MessageParser<AnimationEvent> _parser = new pb::MessageParser<AnimationEvent>(() => new AnimationEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEvent(AnimationEvent other) : this() {
      spawnid_ = other.spawnid_;
      speed_ = other.speed_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEvent Clone() {
      return new AnimationEvent(this);
    }

    /// <summary>Field number for the "spawnid" field.</summary>
    public const int SpawnidFieldNumber = 1;
    private uint spawnid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Spawnid {
      get { return spawnid_; }
      set {
        spawnid_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private uint speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private uint action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawnid != other.Spawnid) return false;
      if (Speed != other.Speed) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawnid != 0) hash ^= Spawnid.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawnid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Spawnid);
      }
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Speed);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawnid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawnid);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEvent other) {
      if (other == null) {
        return;
      }
      if (other.Spawnid != 0) {
        Spawnid = other.Spawnid;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Spawnid = input.ReadUInt32();
            break;
          }
          case 16: {
            Speed = input.ReadUInt32();
            break;
          }
          case 24: {
            Action = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OP_ZoneEntry OP_NewSpawn
  /// </summary>
  public sealed partial class SpawnEvent : pb::IMessage<SpawnEvent> {
    private static readonly pb::MessageParser<SpawnEvent> _parser = new pb::MessageParser<SpawnEvent>(() => new SpawnEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eqproto.MessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnEvent(SpawnEvent other) : this() {
      unknown0000_ = other.unknown0000_;
      gm_ = other.gm_;
      unknown0003_ = other.unknown0003_;
      aaitle_ = other.aaitle_;
      unknown0004_ = other.unknown0004_;
      anon_ = other.anon_;
      face_ = other.face_;
      name_ = other.name_;
      deity_ = other.deity_;
      unknown0073_ = other.unknown0073_;
      size_ = other.size_;
      unknown0079_ = other.unknown0079_;
      nPC_ = other.nPC_;
      invis_ = other.invis_;
      haircolor_ = other.haircolor_;
      curHp_ = other.curHp_;
      maxHp_ = other.maxHp_;
      findable_ = other.findable_;
      unknown0089_ = other.unknown0089_;
      deltaHeading_ = other.deltaHeading_;
      x_ = other.x_;
      padding0054_ = other.padding0054_;
      y_ = other.y_;
      animation_ = other.animation_;
      padding0058_ = other.padding0058_;
      z_ = other.z_;
      deltaY_ = other.deltaY_;
      deltaX_ = other.deltaX_;
      heading_ = other.heading_;
      padding0066_ = other.padding0066_;
      deltaZ_ = other.deltaZ_;
      padding0070_ = other.padding0070_;
      eyecolor1_ = other.eyecolor1_;
      unknown0115_ = other.unknown0115_;
      standState_ = other.standState_;
      drakkinHeritage_ = other.drakkinHeritage_;
      drakkinTattoo_ = other.drakkinTattoo_;
      drakkinDetails_ = other.drakkinDetails_;
      showhelm_ = other.showhelm_;
      unknown0140_ = other.unknown0140_;
      isNpc_ = other.isNpc_;
      hairstyle_ = other.hairstyle_;
      beard_ = other.beard_;
      unknown0147_ = other.unknown0147_;
      level_ = other.level_;
      playerState_ = other.playerState_;
      beardcolor_ = other.beardcolor_;
      suffix_ = other.suffix_;
      petOwnerId_ = other.petOwnerId_;
      guildrank_ = other.guildrank_;
      unknown0194_ = other.unknown0194_;
      Equipment = other.equipment_ != null ? other.Equipment.Clone() : null;
      runspeed_ = other.runspeed_;
      afk_ = other.afk_;
      guildID_ = other.guildID_;
      title_ = other.title_;
      unknown0274_ = other.unknown0274_;
      setTo0XFF_ = other.setTo0XFF_;
      helm_ = other.helm_;
      race_ = other.race_;
      unknown0288_ = other.unknown0288_;
      lastName_ = other.lastName_;
      walkspeed_ = other.walkspeed_;
      unknown0328_ = other.unknown0328_;
      isPet_ = other.isPet_;
      light_ = other.light_;
      class_ = other.class_;
      eyecolor2_ = other.eyecolor2_;
      flymode_ = other.flymode_;
      gender_ = other.gender_;
      bodytype_ = other.bodytype_;
      unknown0336_ = other.unknown0336_;
      equipChest2_ = other.equipChest2_;
      mountColor_ = other.mountColor_;
      spawnId_ = other.spawnId_;
      unknown0344_ = other.unknown0344_;
      isMercenary_ = other.isMercenary_;
      EquipmentTint = other.equipmentTint_ != null ? other.EquipmentTint.Clone() : null;
      lfg_ = other.lfg_;
      destructibleObject_ = other.destructibleObject_;
      destructibleModel_ = other.destructibleModel_;
      destructibleName2_ = other.destructibleName2_;
      destructibleString_ = other.destructibleString_;
      destructibleAppearance_ = other.destructibleAppearance_;
      destructibleUnk1_ = other.destructibleUnk1_;
      destructibleID1_ = other.destructibleID1_;
      destructibleID2_ = other.destructibleID2_;
      destructibleID3_ = other.destructibleID3_;
      destructibleID4_ = other.destructibleID4_;
      destructibleUnk2_ = other.destructibleUnk2_;
      destructibleUnk3_ = other.destructibleUnk3_;
      destructibleUnk4_ = other.destructibleUnk4_;
      destructibleUnk5_ = other.destructibleUnk5_;
      destructibleUnk6_ = other.destructibleUnk6_;
      destructibleUnk7_ = other.destructibleUnk7_;
      destructibleUnk8_ = other.destructibleUnk8_;
      destructibleUnk9_ = other.destructibleUnk9_;
      targetableWithHotkey_ = other.targetableWithHotkey_;
      showName_ = other.showName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnEvent Clone() {
      return new SpawnEvent(this);
    }

    /// <summary>Field number for the "unknown0000" field.</summary>
    public const int Unknown0000FieldNumber = 1;
    private uint unknown0000_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0000 {
      get { return unknown0000_; }
      set {
        unknown0000_ = value;
      }
    }

    /// <summary>Field number for the "gm" field.</summary>
    public const int GmFieldNumber = 2;
    private uint gm_;
    /// <summary>
    /// 0=no, 1=gm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gm {
      get { return gm_; }
      set {
        gm_ = value;
      }
    }

    /// <summary>Field number for the "unknown0003" field.</summary>
    public const int Unknown0003FieldNumber = 3;
    private uint unknown0003_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0003 {
      get { return unknown0003_; }
      set {
        unknown0003_ = value;
      }
    }

    /// <summary>Field number for the "aaitle" field.</summary>
    public const int AaitleFieldNumber = 4;
    private uint aaitle_;
    /// <summary>
    /// 0=none, 1=general, 2=archtype, 3=class
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Aaitle {
      get { return aaitle_; }
      set {
        aaitle_ = value;
      }
    }

    /// <summary>Field number for the "unknown0004" field.</summary>
    public const int Unknown0004FieldNumber = 5;
    private uint unknown0004_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0004 {
      get { return unknown0004_; }
      set {
        unknown0004_ = value;
      }
    }

    /// <summary>Field number for the "anon" field.</summary>
    public const int AnonFieldNumber = 6;
    private uint anon_;
    /// <summary>
    /// 0=normal, 1=anon, 2=roleplay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Anon {
      get { return anon_; }
      set {
        anon_ = value;
      }
    }

    /// <summary>Field number for the "face" field.</summary>
    public const int FaceFieldNumber = 7;
    private uint face_;
    /// <summary>
    /// Face id for players
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// Player's Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deity" field.</summary>
    public const int DeityFieldNumber = 9;
    private uint deity_;
    /// <summary>
    /// Player's Deity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deity {
      get { return deity_; }
      set {
        deity_ = value;
      }
    }

    /// <summary>Field number for the "unknown0073" field.</summary>
    public const int Unknown0073FieldNumber = 10;
    private uint unknown0073_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0073 {
      get { return unknown0073_; }
      set {
        unknown0073_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 11;
    private float size_;
    /// <summary>
    /// Model size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "unknown0079" field.</summary>
    public const int Unknown0079FieldNumber = 12;
    private uint unknown0079_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0079 {
      get { return unknown0079_; }
      set {
        unknown0079_ = value;
      }
    }

    /// <summary>Field number for the "NPC" field.</summary>
    public const int NPCFieldNumber = 13;
    private uint nPC_;
    /// <summary>
    /// 0=player,1=npc,2=pc corpse,3=npc corpse,a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NPC {
      get { return nPC_; }
      set {
        nPC_ = value;
      }
    }

    /// <summary>Field number for the "invis" field.</summary>
    public const int InvisFieldNumber = 14;
    private uint invis_;
    /// <summary>
    /// Invis (0=not, 1=invis)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Invis {
      get { return invis_; }
      set {
        invis_ = value;
      }
    }

    /// <summary>Field number for the "haircolor" field.</summary>
    public const int HaircolorFieldNumber = 15;
    private uint haircolor_;
    /// <summary>
    /// Hair color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Haircolor {
      get { return haircolor_; }
      set {
        haircolor_ = value;
      }
    }

    /// <summary>Field number for the "curHp" field.</summary>
    public const int CurHpFieldNumber = 16;
    private uint curHp_;
    /// <summary>
    /// Current hp %%% wrong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 17;
    private uint maxHp_;
    /// <summary>
    /// (name prolly wrong)takes on the value 100 for players, 100 or 110 for NPCs and 120 for PC corpses...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "findable" field.</summary>
    public const int FindableFieldNumber = 18;
    private uint findable_;
    /// <summary>
    /// 0=can't be found, 1=can be found
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Findable {
      get { return findable_; }
      set {
        findable_ = value;
      }
    }

    /// <summary>Field number for the "unknown0089" field.</summary>
    public const int Unknown0089FieldNumber = 19;
    private uint unknown0089_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0089 {
      get { return unknown0089_; }
      set {
        unknown0089_ = value;
      }
    }

    /// <summary>Field number for the "deltaHeading" field.</summary>
    public const int DeltaHeadingFieldNumber = 20;
    private int deltaHeading_;
    /// <summary>
    /// change in heading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaHeading {
      get { return deltaHeading_; }
      set {
        deltaHeading_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 21;
    private int x_;
    /// <summary>
    /// x coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "padding0054" field.</summary>
    public const int Padding0054FieldNumber = 22;
    private int padding0054_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0054 {
      get { return padding0054_; }
      set {
        padding0054_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 23;
    private int y_;
    /// <summary>
    /// y coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 24;
    private int animation_;
    /// <summary>
    /// animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "padding0058" field.</summary>
    public const int Padding0058FieldNumber = 25;
    private int padding0058_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0058 {
      get { return padding0058_; }
      set {
        padding0058_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 26;
    private int z_;
    /// <summary>
    /// z coord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "deltaY" field.</summary>
    public const int DeltaYFieldNumber = 27;
    private int deltaY_;
    /// <summary>
    /// change in y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaY {
      get { return deltaY_; }
      set {
        deltaY_ = value;
      }
    }

    /// <summary>Field number for the "deltaX" field.</summary>
    public const int DeltaXFieldNumber = 28;
    private int deltaX_;
    /// <summary>
    /// change in x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaX {
      get { return deltaX_; }
      set {
        deltaX_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 29;
    private uint heading_;
    /// <summary>
    /// heading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "padding0066" field.</summary>
    public const int Padding0066FieldNumber = 30;
    private int padding0066_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0066 {
      get { return padding0066_; }
      set {
        padding0066_ = value;
      }
    }

    /// <summary>Field number for the "deltaZ" field.</summary>
    public const int DeltaZFieldNumber = 31;
    private int deltaZ_;
    /// <summary>
    /// change in z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeltaZ {
      get { return deltaZ_; }
      set {
        deltaZ_ = value;
      }
    }

    /// <summary>Field number for the "padding0070" field.</summary>
    public const int Padding0070FieldNumber = 32;
    private int padding0070_;
    /// <summary>
    /// ***Placeholder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Padding0070 {
      get { return padding0070_; }
      set {
        padding0070_ = value;
      }
    }

    /// <summary>Field number for the "eyecolor1" field.</summary>
    public const int Eyecolor1FieldNumber = 33;
    private uint eyecolor1_;
    /// <summary>
    /// Player's left eye color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyecolor1 {
      get { return eyecolor1_; }
      set {
        eyecolor1_ = value;
      }
    }

    /// <summary>Field number for the "unknown0115" field.</summary>
    public const int Unknown0115FieldNumber = 34;
    private uint unknown0115_;
    /// <summary>
    /// Was [24]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0115 {
      get { return unknown0115_; }
      set {
        unknown0115_ = value;
      }
    }

    /// <summary>Field number for the "StandState" field.</summary>
    public const int StandStateFieldNumber = 35;
    private uint standState_;
    /// <summary>
    /// stand state for SoF+ 0x64 for normal animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StandState {
      get { return standState_; }
      set {
        standState_ = value;
      }
    }

    /// <summary>Field number for the "drakkin_heritage" field.</summary>
    public const int DrakkinHeritageFieldNumber = 36;
    private uint drakkinHeritage_;
    /// <summary>
    /// Added for SoF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrakkinHeritage {
      get { return drakkinHeritage_; }
      set {
        drakkinHeritage_ = value;
      }
    }

    /// <summary>Field number for the "drakkin_tattoo" field.</summary>
    public const int DrakkinTattooFieldNumber = 37;
    private uint drakkinTattoo_;
    /// <summary>
    /// Added for SoF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrakkinTattoo {
      get { return drakkinTattoo_; }
      set {
        drakkinTattoo_ = value;
      }
    }

    /// <summary>Field number for the "drakkin_details" field.</summary>
    public const int DrakkinDetailsFieldNumber = 38;
    private uint drakkinDetails_;
    /// <summary>
    /// Added for SoF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrakkinDetails {
      get { return drakkinDetails_; }
      set {
        drakkinDetails_ = value;
      }
    }

    /// <summary>Field number for the "showhelm" field.</summary>
    public const int ShowhelmFieldNumber = 39;
    private uint showhelm_;
    /// <summary>
    /// 0=no, 1=yes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showhelm {
      get { return showhelm_; }
      set {
        showhelm_ = value;
      }
    }

    /// <summary>Field number for the "unknown0140" field.</summary>
    public const int Unknown0140FieldNumber = 40;
    private uint unknown0140_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0140 {
      get { return unknown0140_; }
      set {
        unknown0140_ = value;
      }
    }

    /// <summary>Field number for the "is_npc" field.</summary>
    public const int IsNpcFieldNumber = 41;
    private uint isNpc_;
    /// <summary>
    /// 0=no, 1=yes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsNpc {
      get { return isNpc_; }
      set {
        isNpc_ = value;
      }
    }

    /// <summary>Field number for the "hairstyle" field.</summary>
    public const int HairstyleFieldNumber = 42;
    private uint hairstyle_;
    /// <summary>
    /// Hair style
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hairstyle {
      get { return hairstyle_; }
      set {
        hairstyle_ = value;
      }
    }

    /// <summary>Field number for the "beard" field.</summary>
    public const int BeardFieldNumber = 43;
    private uint beard_;
    /// <summary>
    /// Beard style (not totally, sure but maybe!)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Beard {
      get { return beard_; }
      set {
        beard_ = value;
      }
    }

    /// <summary>Field number for the "unknown0147" field.</summary>
    public const int Unknown0147FieldNumber = 44;
    private uint unknown0147_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0147 {
      get { return unknown0147_; }
      set {
        unknown0147_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 45;
    private uint level_;
    /// <summary>
    /// Spawn Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "PlayerState" field.</summary>
    public const int PlayerStateFieldNumber = 46;
    private uint playerState_;
    /// <summary>
    /// Controls animation stuff // None = 0, Open = 1, WeaponSheathed = 2, Aggressive = 4, ForcedAggressive = 8, InstrumentEquipped = 16, Stunned = 32, PrimaryWeaponEquipped = 64, SecondaryWeaponEquipped = 128
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "beardcolor" field.</summary>
    public const int BeardcolorFieldNumber = 47;
    private uint beardcolor_;
    /// <summary>
    /// Beard color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Beardcolor {
      get { return beardcolor_; }
      set {
        beardcolor_ = value;
      }
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 48;
    private string suffix_ = "";
    /// <summary>
    /// Player's suffix (of Veeshan, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suffix {
      get { return suffix_; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "petOwnerId" field.</summary>
    public const int PetOwnerIdFieldNumber = 49;
    private uint petOwnerId_;
    /// <summary>
    /// If this is a pet, the spawn id of owner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetOwnerId {
      get { return petOwnerId_; }
      set {
        petOwnerId_ = value;
      }
    }

    /// <summary>Field number for the "guildrank" field.</summary>
    public const int GuildrankFieldNumber = 50;
    private uint guildrank_;
    /// <summary>
    /// 0=normal, 1=officer, 2=leader
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guildrank {
      get { return guildrank_; }
      set {
        guildrank_ = value;
      }
    }

    /// <summary>Field number for the "unknown0194" field.</summary>
    public const int Unknown0194FieldNumber = 51;
    private uint unknown0194_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0194 {
      get { return unknown0194_; }
      set {
        unknown0194_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 52;
    private global::Eqproto.TextureProfile equipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.TextureProfile Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    /// <summary>Field number for the "runspeed" field.</summary>
    public const int RunspeedFieldNumber = 53;
    private float runspeed_;
    /// <summary>
    /// Speed when running
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Runspeed {
      get { return runspeed_; }
      set {
        runspeed_ = value;
      }
    }

    /// <summary>Field number for the "afk" field.</summary>
    public const int AfkFieldNumber = 54;
    private uint afk_;
    /// <summary>
    /// 0=no, 1=afk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Afk {
      get { return afk_; }
      set {
        afk_ = value;
      }
    }

    /// <summary>Field number for the "guildID" field.</summary>
    public const int GuildIDFieldNumber = 55;
    private uint guildID_;
    /// <summary>
    /// Current guild
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildID {
      get { return guildID_; }
      set {
        guildID_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 56;
    private string title_ = "";
    /// <summary>
    /// Title
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unknown0274" field.</summary>
    public const int Unknown0274FieldNumber = 57;
    private uint unknown0274_;
    /// <summary>
    /// non-zero prefixes name with '!'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0274 {
      get { return unknown0274_; }
      set {
        unknown0274_ = value;
      }
    }

    /// <summary>Field number for the "set_to_0xFF" field.</summary>
    public const int SetTo0XFFFieldNumber = 58;
    private uint setTo0XFF_;
    /// <summary>
    /// ***Placeholder (all ff)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetTo0XFF {
      get { return setTo0XFF_; }
      set {
        setTo0XFF_ = value;
      }
    }

    /// <summary>Field number for the "helm" field.</summary>
    public const int HelmFieldNumber = 59;
    private uint helm_;
    /// <summary>
    /// Helm texture
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Helm {
      get { return helm_; }
      set {
        helm_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 60;
    private uint race_;
    /// <summary>
    /// Spawn race
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "unknown0288" field.</summary>
    public const int Unknown0288FieldNumber = 61;
    private uint unknown0288_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0288 {
      get { return unknown0288_; }
      set {
        unknown0288_ = value;
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 62;
    private string lastName_ = "";
    /// <summary>
    /// Player's Lastname
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "walkspeed" field.</summary>
    public const int WalkspeedFieldNumber = 63;
    private float walkspeed_;
    /// <summary>
    /// Speed when walking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Walkspeed {
      get { return walkspeed_; }
      set {
        walkspeed_ = value;
      }
    }

    /// <summary>Field number for the "unknown0328" field.</summary>
    public const int Unknown0328FieldNumber = 64;
    private uint unknown0328_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0328 {
      get { return unknown0328_; }
      set {
        unknown0328_ = value;
      }
    }

    /// <summary>Field number for the "is_pet" field.</summary>
    public const int IsPetFieldNumber = 65;
    private uint isPet_;
    /// <summary>
    /// 0=no, 1=yes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsPet {
      get { return isPet_; }
      set {
        isPet_ = value;
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 66;
    private uint light_;
    /// <summary>
    /// Spawn's lightsource %%% wrong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Light {
      get { return light_; }
      set {
        light_ = value;
      }
    }

    /// <summary>Field number for the "class_" field.</summary>
    public const int ClassFieldNumber = 67;
    private uint class_;
    /// <summary>
    /// Player's class
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Class {
      get { return class_; }
      set {
        class_ = value;
      }
    }

    /// <summary>Field number for the "eyecolor2" field.</summary>
    public const int Eyecolor2FieldNumber = 68;
    private uint eyecolor2_;
    /// <summary>
    /// Left eye color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyecolor2 {
      get { return eyecolor2_; }
      set {
        eyecolor2_ = value;
      }
    }

    /// <summary>Field number for the "flymode" field.</summary>
    public const int FlymodeFieldNumber = 69;
    private uint flymode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flymode {
      get { return flymode_; }
      set {
        flymode_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 70;
    private uint gender_;
    /// <summary>
    /// Gender (0=male, 1=female)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "bodytype" field.</summary>
    public const int BodytypeFieldNumber = 71;
    private uint bodytype_;
    /// <summary>
    /// Bodytype
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bodytype {
      get { return bodytype_; }
      set {
        bodytype_ = value;
      }
    }

    /// <summary>Field number for the "unknown0336" field.</summary>
    public const int Unknown0336FieldNumber = 72;
    private uint unknown0336_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0336 {
      get { return unknown0336_; }
      set {
        unknown0336_ = value;
      }
    }

    /// <summary>Field number for the "equip_chest2" field.</summary>
    public const int EquipChest2FieldNumber = 73;
    private uint equipChest2_;
    /// <summary>
    ///union
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipChest2 {
      get { return equipChest2_; }
      set {
        equipChest2_ = value;
      }
    }

    /// <summary>Field number for the "mount_color" field.</summary>
    public const int MountColorFieldNumber = 74;
    private uint mountColor_;
    /// <summary>
    /// drogmor: 0=white, 1=black, 2=green, 3=red horse: 0=brown, 1=white, 2=black, 3=tan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountColor {
      get { return mountColor_; }
      set {
        mountColor_ = value;
      }
    }

    /// <summary>Field number for the "spawnId" field.</summary>
    public const int SpawnIdFieldNumber = 75;
    private uint spawnId_;
    /// <summary>
    ///endunion                            
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnId {
      get { return spawnId_; }
      set {
        spawnId_ = value;
      }
    }

    /// <summary>Field number for the "unknown0344" field.</summary>
    public const int Unknown0344FieldNumber = 76;
    private uint unknown0344_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unknown0344 {
      get { return unknown0344_; }
      set {
        unknown0344_ = value;
      }
    }

    /// <summary>Field number for the "IsMercenary" field.</summary>
    public const int IsMercenaryFieldNumber = 77;
    private uint isMercenary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsMercenary {
      get { return isMercenary_; }
      set {
        isMercenary_ = value;
      }
    }

    /// <summary>Field number for the "equipment_tint" field.</summary>
    public const int EquipmentTintFieldNumber = 78;
    private global::Eqproto.TintProfile equipmentTint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eqproto.TintProfile EquipmentTint {
      get { return equipmentTint_; }
      set {
        equipmentTint_ = value;
      }
    }

    /// <summary>Field number for the "lfg" field.</summary>
    public const int LfgFieldNumber = 79;
    private uint lfg_;
    /// <summary>
    /// 0=off, 1=lfg on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lfg {
      get { return lfg_; }
      set {
        lfg_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleObject" field.</summary>
    public const int DestructibleObjectFieldNumber = 80;
    private bool destructibleObject_;
    /// <summary>
    /// Only used to flag as a destrible object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestructibleObject {
      get { return destructibleObject_; }
      set {
        destructibleObject_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleModel" field.</summary>
    public const int DestructibleModelFieldNumber = 82;
    private string destructibleModel_ = "";
    /// <summary>
    /// Model of the Destructible Object - Required - Seen "DEST_TNT_G"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestructibleModel {
      get { return destructibleModel_; }
      set {
        destructibleModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestructibleName2" field.</summary>
    public const int DestructibleName2FieldNumber = 83;
    private string destructibleName2_ = "";
    /// <summary>
    /// Secondary name - Not Required - Seen "a_tent"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestructibleName2 {
      get { return destructibleName2_; }
      set {
        destructibleName2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestructibleString" field.</summary>
    public const int DestructibleStringFieldNumber = 84;
    private string destructibleString_ = "";
    /// <summary>
    /// Unknown - Not Required - Seen "ZoneActor_01186"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestructibleString {
      get { return destructibleString_; }
      set {
        destructibleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestructibleAppearance" field.</summary>
    public const int DestructibleAppearanceFieldNumber = 85;
    private uint destructibleAppearance_;
    /// <summary>
    /// Damage Appearance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleAppearance {
      get { return destructibleAppearance_; }
      set {
        destructibleAppearance_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk1" field.</summary>
    public const int DestructibleUnk1FieldNumber = 86;
    private uint destructibleUnk1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk1 {
      get { return destructibleUnk1_; }
      set {
        destructibleUnk1_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleID1" field.</summary>
    public const int DestructibleID1FieldNumber = 87;
    private uint destructibleID1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleID1 {
      get { return destructibleID1_; }
      set {
        destructibleID1_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleID2" field.</summary>
    public const int DestructibleID2FieldNumber = 88;
    private uint destructibleID2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleID2 {
      get { return destructibleID2_; }
      set {
        destructibleID2_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleID3" field.</summary>
    public const int DestructibleID3FieldNumber = 89;
    private uint destructibleID3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleID3 {
      get { return destructibleID3_; }
      set {
        destructibleID3_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleID4" field.</summary>
    public const int DestructibleID4FieldNumber = 90;
    private uint destructibleID4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleID4 {
      get { return destructibleID4_; }
      set {
        destructibleID4_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk2" field.</summary>
    public const int DestructibleUnk2FieldNumber = 91;
    private uint destructibleUnk2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk2 {
      get { return destructibleUnk2_; }
      set {
        destructibleUnk2_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk3" field.</summary>
    public const int DestructibleUnk3FieldNumber = 92;
    private uint destructibleUnk3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk3 {
      get { return destructibleUnk3_; }
      set {
        destructibleUnk3_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk4" field.</summary>
    public const int DestructibleUnk4FieldNumber = 93;
    private uint destructibleUnk4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk4 {
      get { return destructibleUnk4_; }
      set {
        destructibleUnk4_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk5" field.</summary>
    public const int DestructibleUnk5FieldNumber = 94;
    private uint destructibleUnk5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk5 {
      get { return destructibleUnk5_; }
      set {
        destructibleUnk5_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk6" field.</summary>
    public const int DestructibleUnk6FieldNumber = 95;
    private uint destructibleUnk6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk6 {
      get { return destructibleUnk6_; }
      set {
        destructibleUnk6_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk7" field.</summary>
    public const int DestructibleUnk7FieldNumber = 96;
    private uint destructibleUnk7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk7 {
      get { return destructibleUnk7_; }
      set {
        destructibleUnk7_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk8" field.</summary>
    public const int DestructibleUnk8FieldNumber = 97;
    private uint destructibleUnk8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk8 {
      get { return destructibleUnk8_; }
      set {
        destructibleUnk8_ = value;
      }
    }

    /// <summary>Field number for the "DestructibleUnk9" field.</summary>
    public const int DestructibleUnk9FieldNumber = 98;
    private uint destructibleUnk9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestructibleUnk9 {
      get { return destructibleUnk9_; }
      set {
        destructibleUnk9_ = value;
      }
    }

    /// <summary>Field number for the "targetable_with_hotkey" field.</summary>
    public const int TargetableWithHotkeyFieldNumber = 99;
    private bool targetableWithHotkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TargetableWithHotkey {
      get { return targetableWithHotkey_; }
      set {
        targetableWithHotkey_ = value;
      }
    }

    /// <summary>Field number for the "show_name" field.</summary>
    public const int ShowNameFieldNumber = 100;
    private bool showName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowName {
      get { return showName_; }
      set {
        showName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unknown0000 != other.Unknown0000) return false;
      if (Gm != other.Gm) return false;
      if (Unknown0003 != other.Unknown0003) return false;
      if (Aaitle != other.Aaitle) return false;
      if (Unknown0004 != other.Unknown0004) return false;
      if (Anon != other.Anon) return false;
      if (Face != other.Face) return false;
      if (Name != other.Name) return false;
      if (Deity != other.Deity) return false;
      if (Unknown0073 != other.Unknown0073) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Size, other.Size)) return false;
      if (Unknown0079 != other.Unknown0079) return false;
      if (NPC != other.NPC) return false;
      if (Invis != other.Invis) return false;
      if (Haircolor != other.Haircolor) return false;
      if (CurHp != other.CurHp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Findable != other.Findable) return false;
      if (Unknown0089 != other.Unknown0089) return false;
      if (DeltaHeading != other.DeltaHeading) return false;
      if (X != other.X) return false;
      if (Padding0054 != other.Padding0054) return false;
      if (Y != other.Y) return false;
      if (Animation != other.Animation) return false;
      if (Padding0058 != other.Padding0058) return false;
      if (Z != other.Z) return false;
      if (DeltaY != other.DeltaY) return false;
      if (DeltaX != other.DeltaX) return false;
      if (Heading != other.Heading) return false;
      if (Padding0066 != other.Padding0066) return false;
      if (DeltaZ != other.DeltaZ) return false;
      if (Padding0070 != other.Padding0070) return false;
      if (Eyecolor1 != other.Eyecolor1) return false;
      if (Unknown0115 != other.Unknown0115) return false;
      if (StandState != other.StandState) return false;
      if (DrakkinHeritage != other.DrakkinHeritage) return false;
      if (DrakkinTattoo != other.DrakkinTattoo) return false;
      if (DrakkinDetails != other.DrakkinDetails) return false;
      if (Showhelm != other.Showhelm) return false;
      if (Unknown0140 != other.Unknown0140) return false;
      if (IsNpc != other.IsNpc) return false;
      if (Hairstyle != other.Hairstyle) return false;
      if (Beard != other.Beard) return false;
      if (Unknown0147 != other.Unknown0147) return false;
      if (Level != other.Level) return false;
      if (PlayerState != other.PlayerState) return false;
      if (Beardcolor != other.Beardcolor) return false;
      if (Suffix != other.Suffix) return false;
      if (PetOwnerId != other.PetOwnerId) return false;
      if (Guildrank != other.Guildrank) return false;
      if (Unknown0194 != other.Unknown0194) return false;
      if (!object.Equals(Equipment, other.Equipment)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Runspeed, other.Runspeed)) return false;
      if (Afk != other.Afk) return false;
      if (GuildID != other.GuildID) return false;
      if (Title != other.Title) return false;
      if (Unknown0274 != other.Unknown0274) return false;
      if (SetTo0XFF != other.SetTo0XFF) return false;
      if (Helm != other.Helm) return false;
      if (Race != other.Race) return false;
      if (Unknown0288 != other.Unknown0288) return false;
      if (LastName != other.LastName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Walkspeed, other.Walkspeed)) return false;
      if (Unknown0328 != other.Unknown0328) return false;
      if (IsPet != other.IsPet) return false;
      if (Light != other.Light) return false;
      if (Class != other.Class) return false;
      if (Eyecolor2 != other.Eyecolor2) return false;
      if (Flymode != other.Flymode) return false;
      if (Gender != other.Gender) return false;
      if (Bodytype != other.Bodytype) return false;
      if (Unknown0336 != other.Unknown0336) return false;
      if (EquipChest2 != other.EquipChest2) return false;
      if (MountColor != other.MountColor) return false;
      if (SpawnId != other.SpawnId) return false;
      if (Unknown0344 != other.Unknown0344) return false;
      if (IsMercenary != other.IsMercenary) return false;
      if (!object.Equals(EquipmentTint, other.EquipmentTint)) return false;
      if (Lfg != other.Lfg) return false;
      if (DestructibleObject != other.DestructibleObject) return false;
      if (DestructibleModel != other.DestructibleModel) return false;
      if (DestructibleName2 != other.DestructibleName2) return false;
      if (DestructibleString != other.DestructibleString) return false;
      if (DestructibleAppearance != other.DestructibleAppearance) return false;
      if (DestructibleUnk1 != other.DestructibleUnk1) return false;
      if (DestructibleID1 != other.DestructibleID1) return false;
      if (DestructibleID2 != other.DestructibleID2) return false;
      if (DestructibleID3 != other.DestructibleID3) return false;
      if (DestructibleID4 != other.DestructibleID4) return false;
      if (DestructibleUnk2 != other.DestructibleUnk2) return false;
      if (DestructibleUnk3 != other.DestructibleUnk3) return false;
      if (DestructibleUnk4 != other.DestructibleUnk4) return false;
      if (DestructibleUnk5 != other.DestructibleUnk5) return false;
      if (DestructibleUnk6 != other.DestructibleUnk6) return false;
      if (DestructibleUnk7 != other.DestructibleUnk7) return false;
      if (DestructibleUnk8 != other.DestructibleUnk8) return false;
      if (DestructibleUnk9 != other.DestructibleUnk9) return false;
      if (TargetableWithHotkey != other.TargetableWithHotkey) return false;
      if (ShowName != other.ShowName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unknown0000 != 0) hash ^= Unknown0000.GetHashCode();
      if (Gm != 0) hash ^= Gm.GetHashCode();
      if (Unknown0003 != 0) hash ^= Unknown0003.GetHashCode();
      if (Aaitle != 0) hash ^= Aaitle.GetHashCode();
      if (Unknown0004 != 0) hash ^= Unknown0004.GetHashCode();
      if (Anon != 0) hash ^= Anon.GetHashCode();
      if (Face != 0) hash ^= Face.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Deity != 0) hash ^= Deity.GetHashCode();
      if (Unknown0073 != 0) hash ^= Unknown0073.GetHashCode();
      if (Size != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Size);
      if (Unknown0079 != 0) hash ^= Unknown0079.GetHashCode();
      if (NPC != 0) hash ^= NPC.GetHashCode();
      if (Invis != 0) hash ^= Invis.GetHashCode();
      if (Haircolor != 0) hash ^= Haircolor.GetHashCode();
      if (CurHp != 0) hash ^= CurHp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Findable != 0) hash ^= Findable.GetHashCode();
      if (Unknown0089 != 0) hash ^= Unknown0089.GetHashCode();
      if (DeltaHeading != 0) hash ^= DeltaHeading.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Padding0054 != 0) hash ^= Padding0054.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Animation != 0) hash ^= Animation.GetHashCode();
      if (Padding0058 != 0) hash ^= Padding0058.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (DeltaY != 0) hash ^= DeltaY.GetHashCode();
      if (DeltaX != 0) hash ^= DeltaX.GetHashCode();
      if (Heading != 0) hash ^= Heading.GetHashCode();
      if (Padding0066 != 0) hash ^= Padding0066.GetHashCode();
      if (DeltaZ != 0) hash ^= DeltaZ.GetHashCode();
      if (Padding0070 != 0) hash ^= Padding0070.GetHashCode();
      if (Eyecolor1 != 0) hash ^= Eyecolor1.GetHashCode();
      if (Unknown0115 != 0) hash ^= Unknown0115.GetHashCode();
      if (StandState != 0) hash ^= StandState.GetHashCode();
      if (DrakkinHeritage != 0) hash ^= DrakkinHeritage.GetHashCode();
      if (DrakkinTattoo != 0) hash ^= DrakkinTattoo.GetHashCode();
      if (DrakkinDetails != 0) hash ^= DrakkinDetails.GetHashCode();
      if (Showhelm != 0) hash ^= Showhelm.GetHashCode();
      if (Unknown0140 != 0) hash ^= Unknown0140.GetHashCode();
      if (IsNpc != 0) hash ^= IsNpc.GetHashCode();
      if (Hairstyle != 0) hash ^= Hairstyle.GetHashCode();
      if (Beard != 0) hash ^= Beard.GetHashCode();
      if (Unknown0147 != 0) hash ^= Unknown0147.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (Beardcolor != 0) hash ^= Beardcolor.GetHashCode();
      if (Suffix.Length != 0) hash ^= Suffix.GetHashCode();
      if (PetOwnerId != 0) hash ^= PetOwnerId.GetHashCode();
      if (Guildrank != 0) hash ^= Guildrank.GetHashCode();
      if (Unknown0194 != 0) hash ^= Unknown0194.GetHashCode();
      if (equipment_ != null) hash ^= Equipment.GetHashCode();
      if (Runspeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Runspeed);
      if (Afk != 0) hash ^= Afk.GetHashCode();
      if (GuildID != 0) hash ^= GuildID.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Unknown0274 != 0) hash ^= Unknown0274.GetHashCode();
      if (SetTo0XFF != 0) hash ^= SetTo0XFF.GetHashCode();
      if (Helm != 0) hash ^= Helm.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (Unknown0288 != 0) hash ^= Unknown0288.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Walkspeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Walkspeed);
      if (Unknown0328 != 0) hash ^= Unknown0328.GetHashCode();
      if (IsPet != 0) hash ^= IsPet.GetHashCode();
      if (Light != 0) hash ^= Light.GetHashCode();
      if (Class != 0) hash ^= Class.GetHashCode();
      if (Eyecolor2 != 0) hash ^= Eyecolor2.GetHashCode();
      if (Flymode != 0) hash ^= Flymode.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Bodytype != 0) hash ^= Bodytype.GetHashCode();
      if (Unknown0336 != 0) hash ^= Unknown0336.GetHashCode();
      if (EquipChest2 != 0) hash ^= EquipChest2.GetHashCode();
      if (MountColor != 0) hash ^= MountColor.GetHashCode();
      if (SpawnId != 0) hash ^= SpawnId.GetHashCode();
      if (Unknown0344 != 0) hash ^= Unknown0344.GetHashCode();
      if (IsMercenary != 0) hash ^= IsMercenary.GetHashCode();
      if (equipmentTint_ != null) hash ^= EquipmentTint.GetHashCode();
      if (Lfg != 0) hash ^= Lfg.GetHashCode();
      if (DestructibleObject != false) hash ^= DestructibleObject.GetHashCode();
      if (DestructibleModel.Length != 0) hash ^= DestructibleModel.GetHashCode();
      if (DestructibleName2.Length != 0) hash ^= DestructibleName2.GetHashCode();
      if (DestructibleString.Length != 0) hash ^= DestructibleString.GetHashCode();
      if (DestructibleAppearance != 0) hash ^= DestructibleAppearance.GetHashCode();
      if (DestructibleUnk1 != 0) hash ^= DestructibleUnk1.GetHashCode();
      if (DestructibleID1 != 0) hash ^= DestructibleID1.GetHashCode();
      if (DestructibleID2 != 0) hash ^= DestructibleID2.GetHashCode();
      if (DestructibleID3 != 0) hash ^= DestructibleID3.GetHashCode();
      if (DestructibleID4 != 0) hash ^= DestructibleID4.GetHashCode();
      if (DestructibleUnk2 != 0) hash ^= DestructibleUnk2.GetHashCode();
      if (DestructibleUnk3 != 0) hash ^= DestructibleUnk3.GetHashCode();
      if (DestructibleUnk4 != 0) hash ^= DestructibleUnk4.GetHashCode();
      if (DestructibleUnk5 != 0) hash ^= DestructibleUnk5.GetHashCode();
      if (DestructibleUnk6 != 0) hash ^= DestructibleUnk6.GetHashCode();
      if (DestructibleUnk7 != 0) hash ^= DestructibleUnk7.GetHashCode();
      if (DestructibleUnk8 != 0) hash ^= DestructibleUnk8.GetHashCode();
      if (DestructibleUnk9 != 0) hash ^= DestructibleUnk9.GetHashCode();
      if (TargetableWithHotkey != false) hash ^= TargetableWithHotkey.GetHashCode();
      if (ShowName != false) hash ^= ShowName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unknown0000 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Unknown0000);
      }
      if (Gm != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Gm);
      }
      if (Unknown0003 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Unknown0003);
      }
      if (Aaitle != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Aaitle);
      }
      if (Unknown0004 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Unknown0004);
      }
      if (Anon != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Anon);
      }
      if (Face != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Face);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (Deity != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Deity);
      }
      if (Unknown0073 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Unknown0073);
      }
      if (Size != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Size);
      }
      if (Unknown0079 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Unknown0079);
      }
      if (NPC != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(NPC);
      }
      if (Invis != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Invis);
      }
      if (Haircolor != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Haircolor);
      }
      if (CurHp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CurHp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxHp);
      }
      if (Findable != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Findable);
      }
      if (Unknown0089 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Unknown0089);
      }
      if (DeltaHeading != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeltaHeading);
      }
      if (X != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(X);
      }
      if (Padding0054 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Padding0054);
      }
      if (Y != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Y);
      }
      if (Animation != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Animation);
      }
      if (Padding0058 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Padding0058);
      }
      if (Z != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Z);
      }
      if (DeltaY != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DeltaY);
      }
      if (DeltaX != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DeltaX);
      }
      if (Heading != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Heading);
      }
      if (Padding0066 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Padding0066);
      }
      if (DeltaZ != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(DeltaZ);
      }
      if (Padding0070 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Padding0070);
      }
      if (Eyecolor1 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(Eyecolor1);
      }
      if (Unknown0115 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Unknown0115);
      }
      if (StandState != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(StandState);
      }
      if (DrakkinHeritage != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(DrakkinHeritage);
      }
      if (DrakkinTattoo != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(DrakkinTattoo);
      }
      if (DrakkinDetails != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(DrakkinDetails);
      }
      if (Showhelm != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Showhelm);
      }
      if (Unknown0140 != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(Unknown0140);
      }
      if (IsNpc != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(IsNpc);
      }
      if (Hairstyle != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(Hairstyle);
      }
      if (Beard != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(Beard);
      }
      if (Unknown0147 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Unknown0147);
      }
      if (Level != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Level);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(PlayerState);
      }
      if (Beardcolor != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Beardcolor);
      }
      if (Suffix.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Suffix);
      }
      if (PetOwnerId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(PetOwnerId);
      }
      if (Guildrank != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(Guildrank);
      }
      if (Unknown0194 != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(Unknown0194);
      }
      if (equipment_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(Equipment);
      }
      if (Runspeed != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(Runspeed);
      }
      if (Afk != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(Afk);
      }
      if (GuildID != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(GuildID);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Title);
      }
      if (Unknown0274 != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(Unknown0274);
      }
      if (SetTo0XFF != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(SetTo0XFF);
      }
      if (Helm != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(Helm);
      }
      if (Race != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(Race);
      }
      if (Unknown0288 != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(Unknown0288);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(LastName);
      }
      if (Walkspeed != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(Walkspeed);
      }
      if (Unknown0328 != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(Unknown0328);
      }
      if (IsPet != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(IsPet);
      }
      if (Light != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(Light);
      }
      if (Class != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(Class);
      }
      if (Eyecolor2 != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(Eyecolor2);
      }
      if (Flymode != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(Flymode);
      }
      if (Gender != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(Gender);
      }
      if (Bodytype != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(Bodytype);
      }
      if (Unknown0336 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(Unknown0336);
      }
      if (EquipChest2 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(EquipChest2);
      }
      if (MountColor != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(MountColor);
      }
      if (SpawnId != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(SpawnId);
      }
      if (Unknown0344 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(Unknown0344);
      }
      if (IsMercenary != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(IsMercenary);
      }
      if (equipmentTint_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(EquipmentTint);
      }
      if (Lfg != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(Lfg);
      }
      if (DestructibleObject != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(DestructibleObject);
      }
      if (DestructibleModel.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(DestructibleModel);
      }
      if (DestructibleName2.Length != 0) {
        output.WriteRawTag(154, 5);
        output.WriteString(DestructibleName2);
      }
      if (DestructibleString.Length != 0) {
        output.WriteRawTag(162, 5);
        output.WriteString(DestructibleString);
      }
      if (DestructibleAppearance != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(DestructibleAppearance);
      }
      if (DestructibleUnk1 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(DestructibleUnk1);
      }
      if (DestructibleID1 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(DestructibleID1);
      }
      if (DestructibleID2 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(DestructibleID2);
      }
      if (DestructibleID3 != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(DestructibleID3);
      }
      if (DestructibleID4 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(DestructibleID4);
      }
      if (DestructibleUnk2 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(DestructibleUnk2);
      }
      if (DestructibleUnk3 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(DestructibleUnk3);
      }
      if (DestructibleUnk4 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(DestructibleUnk4);
      }
      if (DestructibleUnk5 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(DestructibleUnk5);
      }
      if (DestructibleUnk6 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(DestructibleUnk6);
      }
      if (DestructibleUnk7 != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(DestructibleUnk7);
      }
      if (DestructibleUnk8 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(DestructibleUnk8);
      }
      if (DestructibleUnk9 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(DestructibleUnk9);
      }
      if (TargetableWithHotkey != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(TargetableWithHotkey);
      }
      if (ShowName != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(ShowName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unknown0000 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0000);
      }
      if (Gm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gm);
      }
      if (Unknown0003 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0003);
      }
      if (Aaitle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Aaitle);
      }
      if (Unknown0004 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0004);
      }
      if (Anon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Anon);
      }
      if (Face != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Face);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Deity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deity);
      }
      if (Unknown0073 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0073);
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      if (Unknown0079 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0079);
      }
      if (NPC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NPC);
      }
      if (Invis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Invis);
      }
      if (Haircolor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Haircolor);
      }
      if (CurHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurHp);
      }
      if (MaxHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxHp);
      }
      if (Findable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Findable);
      }
      if (Unknown0089 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0089);
      }
      if (DeltaHeading != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaHeading);
      }
      if (X != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Padding0054 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Padding0054);
      }
      if (Y != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Animation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Animation);
      }
      if (Padding0058 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Padding0058);
      }
      if (Z != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (DeltaY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaY);
      }
      if (DeltaX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaX);
      }
      if (Heading != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Heading);
      }
      if (Padding0066 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Padding0066);
      }
      if (DeltaZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeltaZ);
      }
      if (Padding0070 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Padding0070);
      }
      if (Eyecolor1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Eyecolor1);
      }
      if (Unknown0115 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0115);
      }
      if (StandState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StandState);
      }
      if (DrakkinHeritage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DrakkinHeritage);
      }
      if (DrakkinTattoo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DrakkinTattoo);
      }
      if (DrakkinDetails != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DrakkinDetails);
      }
      if (Showhelm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Showhelm);
      }
      if (Unknown0140 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0140);
      }
      if (IsNpc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsNpc);
      }
      if (Hairstyle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hairstyle);
      }
      if (Beard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Beard);
      }
      if (Unknown0147 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0147);
      }
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (PlayerState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayerState);
      }
      if (Beardcolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Beardcolor);
      }
      if (Suffix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (PetOwnerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PetOwnerId);
      }
      if (Guildrank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Guildrank);
      }
      if (Unknown0194 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0194);
      }
      if (equipment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (Runspeed != 0F) {
        size += 2 + 4;
      }
      if (Afk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Afk);
      }
      if (GuildID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuildID);
      }
      if (Title.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Unknown0274 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0274);
      }
      if (SetTo0XFF != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SetTo0XFF);
      }
      if (Helm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Helm);
      }
      if (Race != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Race);
      }
      if (Unknown0288 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0288);
      }
      if (LastName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Walkspeed != 0F) {
        size += 2 + 4;
      }
      if (Unknown0328 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0328);
      }
      if (IsPet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsPet);
      }
      if (Light != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Light);
      }
      if (Class != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Class);
      }
      if (Eyecolor2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Eyecolor2);
      }
      if (Flymode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Flymode);
      }
      if (Gender != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Bodytype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Bodytype);
      }
      if (Unknown0336 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0336);
      }
      if (EquipChest2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipChest2);
      }
      if (MountColor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MountColor);
      }
      if (SpawnId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpawnId);
      }
      if (Unknown0344 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0344);
      }
      if (IsMercenary != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsMercenary);
      }
      if (equipmentTint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EquipmentTint);
      }
      if (Lfg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Lfg);
      }
      if (DestructibleObject != false) {
        size += 2 + 1;
      }
      if (DestructibleModel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestructibleModel);
      }
      if (DestructibleName2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestructibleName2);
      }
      if (DestructibleString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestructibleString);
      }
      if (DestructibleAppearance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleAppearance);
      }
      if (DestructibleUnk1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk1);
      }
      if (DestructibleID1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleID1);
      }
      if (DestructibleID2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleID2);
      }
      if (DestructibleID3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleID3);
      }
      if (DestructibleID4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleID4);
      }
      if (DestructibleUnk2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk2);
      }
      if (DestructibleUnk3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk3);
      }
      if (DestructibleUnk4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk4);
      }
      if (DestructibleUnk5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk5);
      }
      if (DestructibleUnk6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk6);
      }
      if (DestructibleUnk7 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk7);
      }
      if (DestructibleUnk8 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk8);
      }
      if (DestructibleUnk9 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DestructibleUnk9);
      }
      if (TargetableWithHotkey != false) {
        size += 2 + 1;
      }
      if (ShowName != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnEvent other) {
      if (other == null) {
        return;
      }
      if (other.Unknown0000 != 0) {
        Unknown0000 = other.Unknown0000;
      }
      if (other.Gm != 0) {
        Gm = other.Gm;
      }
      if (other.Unknown0003 != 0) {
        Unknown0003 = other.Unknown0003;
      }
      if (other.Aaitle != 0) {
        Aaitle = other.Aaitle;
      }
      if (other.Unknown0004 != 0) {
        Unknown0004 = other.Unknown0004;
      }
      if (other.Anon != 0) {
        Anon = other.Anon;
      }
      if (other.Face != 0) {
        Face = other.Face;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Deity != 0) {
        Deity = other.Deity;
      }
      if (other.Unknown0073 != 0) {
        Unknown0073 = other.Unknown0073;
      }
      if (other.Size != 0F) {
        Size = other.Size;
      }
      if (other.Unknown0079 != 0) {
        Unknown0079 = other.Unknown0079;
      }
      if (other.NPC != 0) {
        NPC = other.NPC;
      }
      if (other.Invis != 0) {
        Invis = other.Invis;
      }
      if (other.Haircolor != 0) {
        Haircolor = other.Haircolor;
      }
      if (other.CurHp != 0) {
        CurHp = other.CurHp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Findable != 0) {
        Findable = other.Findable;
      }
      if (other.Unknown0089 != 0) {
        Unknown0089 = other.Unknown0089;
      }
      if (other.DeltaHeading != 0) {
        DeltaHeading = other.DeltaHeading;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Padding0054 != 0) {
        Padding0054 = other.Padding0054;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Animation != 0) {
        Animation = other.Animation;
      }
      if (other.Padding0058 != 0) {
        Padding0058 = other.Padding0058;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.DeltaY != 0) {
        DeltaY = other.DeltaY;
      }
      if (other.DeltaX != 0) {
        DeltaX = other.DeltaX;
      }
      if (other.Heading != 0) {
        Heading = other.Heading;
      }
      if (other.Padding0066 != 0) {
        Padding0066 = other.Padding0066;
      }
      if (other.DeltaZ != 0) {
        DeltaZ = other.DeltaZ;
      }
      if (other.Padding0070 != 0) {
        Padding0070 = other.Padding0070;
      }
      if (other.Eyecolor1 != 0) {
        Eyecolor1 = other.Eyecolor1;
      }
      if (other.Unknown0115 != 0) {
        Unknown0115 = other.Unknown0115;
      }
      if (other.StandState != 0) {
        StandState = other.StandState;
      }
      if (other.DrakkinHeritage != 0) {
        DrakkinHeritage = other.DrakkinHeritage;
      }
      if (other.DrakkinTattoo != 0) {
        DrakkinTattoo = other.DrakkinTattoo;
      }
      if (other.DrakkinDetails != 0) {
        DrakkinDetails = other.DrakkinDetails;
      }
      if (other.Showhelm != 0) {
        Showhelm = other.Showhelm;
      }
      if (other.Unknown0140 != 0) {
        Unknown0140 = other.Unknown0140;
      }
      if (other.IsNpc != 0) {
        IsNpc = other.IsNpc;
      }
      if (other.Hairstyle != 0) {
        Hairstyle = other.Hairstyle;
      }
      if (other.Beard != 0) {
        Beard = other.Beard;
      }
      if (other.Unknown0147 != 0) {
        Unknown0147 = other.Unknown0147;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      if (other.Beardcolor != 0) {
        Beardcolor = other.Beardcolor;
      }
      if (other.Suffix.Length != 0) {
        Suffix = other.Suffix;
      }
      if (other.PetOwnerId != 0) {
        PetOwnerId = other.PetOwnerId;
      }
      if (other.Guildrank != 0) {
        Guildrank = other.Guildrank;
      }
      if (other.Unknown0194 != 0) {
        Unknown0194 = other.Unknown0194;
      }
      if (other.equipment_ != null) {
        if (equipment_ == null) {
          equipment_ = new global::Eqproto.TextureProfile();
        }
        Equipment.MergeFrom(other.Equipment);
      }
      if (other.Runspeed != 0F) {
        Runspeed = other.Runspeed;
      }
      if (other.Afk != 0) {
        Afk = other.Afk;
      }
      if (other.GuildID != 0) {
        GuildID = other.GuildID;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Unknown0274 != 0) {
        Unknown0274 = other.Unknown0274;
      }
      if (other.SetTo0XFF != 0) {
        SetTo0XFF = other.SetTo0XFF;
      }
      if (other.Helm != 0) {
        Helm = other.Helm;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.Unknown0288 != 0) {
        Unknown0288 = other.Unknown0288;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Walkspeed != 0F) {
        Walkspeed = other.Walkspeed;
      }
      if (other.Unknown0328 != 0) {
        Unknown0328 = other.Unknown0328;
      }
      if (other.IsPet != 0) {
        IsPet = other.IsPet;
      }
      if (other.Light != 0) {
        Light = other.Light;
      }
      if (other.Class != 0) {
        Class = other.Class;
      }
      if (other.Eyecolor2 != 0) {
        Eyecolor2 = other.Eyecolor2;
      }
      if (other.Flymode != 0) {
        Flymode = other.Flymode;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Bodytype != 0) {
        Bodytype = other.Bodytype;
      }
      if (other.Unknown0336 != 0) {
        Unknown0336 = other.Unknown0336;
      }
      if (other.EquipChest2 != 0) {
        EquipChest2 = other.EquipChest2;
      }
      if (other.MountColor != 0) {
        MountColor = other.MountColor;
      }
      if (other.SpawnId != 0) {
        SpawnId = other.SpawnId;
      }
      if (other.Unknown0344 != 0) {
        Unknown0344 = other.Unknown0344;
      }
      if (other.IsMercenary != 0) {
        IsMercenary = other.IsMercenary;
      }
      if (other.equipmentTint_ != null) {
        if (equipmentTint_ == null) {
          equipmentTint_ = new global::Eqproto.TintProfile();
        }
        EquipmentTint.MergeFrom(other.EquipmentTint);
      }
      if (other.Lfg != 0) {
        Lfg = other.Lfg;
      }
      if (other.DestructibleObject != false) {
        DestructibleObject = other.DestructibleObject;
      }
      if (other.DestructibleModel.Length != 0) {
        DestructibleModel = other.DestructibleModel;
      }
      if (other.DestructibleName2.Length != 0) {
        DestructibleName2 = other.DestructibleName2;
      }
      if (other.DestructibleString.Length != 0) {
        DestructibleString = other.DestructibleString;
      }
      if (other.DestructibleAppearance != 0) {
        DestructibleAppearance = other.DestructibleAppearance;
      }
      if (other.DestructibleUnk1 != 0) {
        DestructibleUnk1 = other.DestructibleUnk1;
      }
      if (other.DestructibleID1 != 0) {
        DestructibleID1 = other.DestructibleID1;
      }
      if (other.DestructibleID2 != 0) {
        DestructibleID2 = other.DestructibleID2;
      }
      if (other.DestructibleID3 != 0) {
        DestructibleID3 = other.DestructibleID3;
      }
      if (other.DestructibleID4 != 0) {
        DestructibleID4 = other.DestructibleID4;
      }
      if (other.DestructibleUnk2 != 0) {
        DestructibleUnk2 = other.DestructibleUnk2;
      }
      if (other.DestructibleUnk3 != 0) {
        DestructibleUnk3 = other.DestructibleUnk3;
      }
      if (other.DestructibleUnk4 != 0) {
        DestructibleUnk4 = other.DestructibleUnk4;
      }
      if (other.DestructibleUnk5 != 0) {
        DestructibleUnk5 = other.DestructibleUnk5;
      }
      if (other.DestructibleUnk6 != 0) {
        DestructibleUnk6 = other.DestructibleUnk6;
      }
      if (other.DestructibleUnk7 != 0) {
        DestructibleUnk7 = other.DestructibleUnk7;
      }
      if (other.DestructibleUnk8 != 0) {
        DestructibleUnk8 = other.DestructibleUnk8;
      }
      if (other.DestructibleUnk9 != 0) {
        DestructibleUnk9 = other.DestructibleUnk9;
      }
      if (other.TargetableWithHotkey != false) {
        TargetableWithHotkey = other.TargetableWithHotkey;
      }
      if (other.ShowName != false) {
        ShowName = other.ShowName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unknown0000 = input.ReadUInt32();
            break;
          }
          case 16: {
            Gm = input.ReadUInt32();
            break;
          }
          case 24: {
            Unknown0003 = input.ReadUInt32();
            break;
          }
          case 32: {
            Aaitle = input.ReadUInt32();
            break;
          }
          case 40: {
            Unknown0004 = input.ReadUInt32();
            break;
          }
          case 48: {
            Anon = input.ReadUInt32();
            break;
          }
          case 56: {
            Face = input.ReadUInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            Deity = input.ReadUInt32();
            break;
          }
          case 80: {
            Unknown0073 = input.ReadUInt32();
            break;
          }
          case 93: {
            Size = input.ReadFloat();
            break;
          }
          case 96: {
            Unknown0079 = input.ReadUInt32();
            break;
          }
          case 104: {
            NPC = input.ReadUInt32();
            break;
          }
          case 112: {
            Invis = input.ReadUInt32();
            break;
          }
          case 120: {
            Haircolor = input.ReadUInt32();
            break;
          }
          case 128: {
            CurHp = input.ReadUInt32();
            break;
          }
          case 136: {
            MaxHp = input.ReadUInt32();
            break;
          }
          case 144: {
            Findable = input.ReadUInt32();
            break;
          }
          case 152: {
            Unknown0089 = input.ReadUInt32();
            break;
          }
          case 160: {
            DeltaHeading = input.ReadInt32();
            break;
          }
          case 168: {
            X = input.ReadInt32();
            break;
          }
          case 176: {
            Padding0054 = input.ReadInt32();
            break;
          }
          case 184: {
            Y = input.ReadInt32();
            break;
          }
          case 192: {
            Animation = input.ReadInt32();
            break;
          }
          case 200: {
            Padding0058 = input.ReadInt32();
            break;
          }
          case 208: {
            Z = input.ReadInt32();
            break;
          }
          case 216: {
            DeltaY = input.ReadInt32();
            break;
          }
          case 224: {
            DeltaX = input.ReadInt32();
            break;
          }
          case 232: {
            Heading = input.ReadUInt32();
            break;
          }
          case 240: {
            Padding0066 = input.ReadInt32();
            break;
          }
          case 248: {
            DeltaZ = input.ReadInt32();
            break;
          }
          case 256: {
            Padding0070 = input.ReadInt32();
            break;
          }
          case 264: {
            Eyecolor1 = input.ReadUInt32();
            break;
          }
          case 272: {
            Unknown0115 = input.ReadUInt32();
            break;
          }
          case 280: {
            StandState = input.ReadUInt32();
            break;
          }
          case 288: {
            DrakkinHeritage = input.ReadUInt32();
            break;
          }
          case 296: {
            DrakkinTattoo = input.ReadUInt32();
            break;
          }
          case 304: {
            DrakkinDetails = input.ReadUInt32();
            break;
          }
          case 312: {
            Showhelm = input.ReadUInt32();
            break;
          }
          case 320: {
            Unknown0140 = input.ReadUInt32();
            break;
          }
          case 328: {
            IsNpc = input.ReadUInt32();
            break;
          }
          case 336: {
            Hairstyle = input.ReadUInt32();
            break;
          }
          case 344: {
            Beard = input.ReadUInt32();
            break;
          }
          case 352: {
            Unknown0147 = input.ReadUInt32();
            break;
          }
          case 360: {
            Level = input.ReadUInt32();
            break;
          }
          case 368: {
            PlayerState = input.ReadUInt32();
            break;
          }
          case 376: {
            Beardcolor = input.ReadUInt32();
            break;
          }
          case 386: {
            Suffix = input.ReadString();
            break;
          }
          case 392: {
            PetOwnerId = input.ReadUInt32();
            break;
          }
          case 400: {
            Guildrank = input.ReadUInt32();
            break;
          }
          case 408: {
            Unknown0194 = input.ReadUInt32();
            break;
          }
          case 418: {
            if (equipment_ == null) {
              equipment_ = new global::Eqproto.TextureProfile();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 429: {
            Runspeed = input.ReadFloat();
            break;
          }
          case 432: {
            Afk = input.ReadUInt32();
            break;
          }
          case 440: {
            GuildID = input.ReadUInt32();
            break;
          }
          case 450: {
            Title = input.ReadString();
            break;
          }
          case 456: {
            Unknown0274 = input.ReadUInt32();
            break;
          }
          case 464: {
            SetTo0XFF = input.ReadUInt32();
            break;
          }
          case 472: {
            Helm = input.ReadUInt32();
            break;
          }
          case 480: {
            Race = input.ReadUInt32();
            break;
          }
          case 488: {
            Unknown0288 = input.ReadUInt32();
            break;
          }
          case 498: {
            LastName = input.ReadString();
            break;
          }
          case 509: {
            Walkspeed = input.ReadFloat();
            break;
          }
          case 512: {
            Unknown0328 = input.ReadUInt32();
            break;
          }
          case 520: {
            IsPet = input.ReadUInt32();
            break;
          }
          case 528: {
            Light = input.ReadUInt32();
            break;
          }
          case 536: {
            Class = input.ReadUInt32();
            break;
          }
          case 544: {
            Eyecolor2 = input.ReadUInt32();
            break;
          }
          case 552: {
            Flymode = input.ReadUInt32();
            break;
          }
          case 560: {
            Gender = input.ReadUInt32();
            break;
          }
          case 568: {
            Bodytype = input.ReadUInt32();
            break;
          }
          case 576: {
            Unknown0336 = input.ReadUInt32();
            break;
          }
          case 584: {
            EquipChest2 = input.ReadUInt32();
            break;
          }
          case 592: {
            MountColor = input.ReadUInt32();
            break;
          }
          case 600: {
            SpawnId = input.ReadUInt32();
            break;
          }
          case 608: {
            Unknown0344 = input.ReadUInt32();
            break;
          }
          case 616: {
            IsMercenary = input.ReadUInt32();
            break;
          }
          case 626: {
            if (equipmentTint_ == null) {
              equipmentTint_ = new global::Eqproto.TintProfile();
            }
            input.ReadMessage(equipmentTint_);
            break;
          }
          case 632: {
            Lfg = input.ReadUInt32();
            break;
          }
          case 640: {
            DestructibleObject = input.ReadBool();
            break;
          }
          case 658: {
            DestructibleModel = input.ReadString();
            break;
          }
          case 666: {
            DestructibleName2 = input.ReadString();
            break;
          }
          case 674: {
            DestructibleString = input.ReadString();
            break;
          }
          case 680: {
            DestructibleAppearance = input.ReadUInt32();
            break;
          }
          case 688: {
            DestructibleUnk1 = input.ReadUInt32();
            break;
          }
          case 696: {
            DestructibleID1 = input.ReadUInt32();
            break;
          }
          case 704: {
            DestructibleID2 = input.ReadUInt32();
            break;
          }
          case 712: {
            DestructibleID3 = input.ReadUInt32();
            break;
          }
          case 720: {
            DestructibleID4 = input.ReadUInt32();
            break;
          }
          case 728: {
            DestructibleUnk2 = input.ReadUInt32();
            break;
          }
          case 736: {
            DestructibleUnk3 = input.ReadUInt32();
            break;
          }
          case 744: {
            DestructibleUnk4 = input.ReadUInt32();
            break;
          }
          case 752: {
            DestructibleUnk5 = input.ReadUInt32();
            break;
          }
          case 760: {
            DestructibleUnk6 = input.ReadUInt32();
            break;
          }
          case 768: {
            DestructibleUnk7 = input.ReadUInt32();
            break;
          }
          case 776: {
            DestructibleUnk8 = input.ReadUInt32();
            break;
          }
          case 784: {
            DestructibleUnk9 = input.ReadUInt32();
            break;
          }
          case 792: {
            TargetableWithHotkey = input.ReadBool();
            break;
          }
          case 800: {
            ShowName = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
